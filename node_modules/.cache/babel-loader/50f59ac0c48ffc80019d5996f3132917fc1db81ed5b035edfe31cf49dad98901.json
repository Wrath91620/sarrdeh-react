{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarrdeh Tech\\\\Desktop\\\\Sarrdeh-React\\\\sarrdeh-react\\\\src\\\\components\\\\Components\\\\ScrollStack\\\\ScrollStack.jsx\",\n  _s = $RefreshSig$();\nimport { useLayoutEffect, useRef, useCallback } from \"react\";\nimport \"./ScrollStack.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ScrollStackItem = ({\n  children,\n  itemClassName = \"\"\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `scroll-stack-card ${itemClassName}`.trim(),\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n_c = ScrollStackItem;\nconst ScrollStack = ({\n  children,\n  className = \"\",\n  itemDistance = 100,\n  itemScale = 0.03,\n  itemStackDistance = 30,\n  stackPosition = \"20%\",\n  scaleEndPosition = \"10%\",\n  baseScale = 0.85,\n  scaleDuration = 0.5,\n  rotationAmount = 0,\n  blurAmount = 0,\n  onStackComplete\n}) => {\n  _s();\n  const scrollerRef = useRef(null);\n  const stackCompletedRef = useRef(false);\n  const cardsRef = useRef([]);\n  const lastTransformsRef = useRef(new Map());\n  const isUpdatingRef = useRef(false);\n  const calculateProgress = useCallback((scrollTop, start, end) => {\n    if (scrollTop < start) return 0;\n    if (scrollTop > end) return 1;\n    return (scrollTop - start) / (end - start);\n  }, []);\n  const parsePercentage = useCallback((value, containerHeight) => {\n    if (typeof value === 'string' && value.includes('%')) {\n      return parseFloat(value) / 100 * containerHeight;\n    }\n    return parseFloat(value);\n  }, []);\n  const updateCardTransforms = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller || !cardsRef.current.length || isUpdatingRef.current) return;\n    isUpdatingRef.current = true;\n    const scrollTop = scroller.scrollTop;\n    const containerHeight = scroller.clientHeight;\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\n    cardsRef.current.forEach((card, i) => {\n      if (!card) return;\n      const cardTop = card.offsetTop;\n      const triggerStart = cardTop - stackPositionPx - itemStackDistance * i;\n      const triggerEnd = cardTop - scaleEndPositionPx;\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\n      const targetScale = baseScale + i * itemScale;\n      const scale = 1 - scaleProgress * (1 - targetScale);\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\n      let blur = 0;\n      if (blurAmount) {\n        let topCardIndex = 0;\n        for (let j = 0; j < cardsRef.current.length; j++) {\n          const jCardTop = cardsRef.current[j].offsetTop;\n          const jTriggerStart = jCardTop - stackPositionPx - itemStackDistance * j;\n          if (scrollTop >= jTriggerStart) {\n            topCardIndex = j;\n          }\n        }\n        if (i < topCardIndex) {\n          const depthInStack = topCardIndex - i;\n          blur = Math.max(0, depthInStack * blurAmount);\n        }\n      }\n\n      // Keep cards within the container bounds - prevent scrolling out of view\n      let translateY = 0;\n      const maxTranslateY = containerHeight - card.offsetHeight;\n      if (scrollTop >= triggerStart) {\n        translateY = scrollTop - cardTop + stackPositionPx + itemStackDistance * i;\n        // Clamp the translateY to keep cards visible\n        translateY = Math.max(0, Math.min(translateY, maxTranslateY));\n      }\n      const newTransform = {\n        translateY: Math.round(translateY * 100) / 100,\n        scale: Math.round(scale * 1000) / 1000,\n        rotation: Math.round(rotation * 100) / 100,\n        blur: Math.round(blur * 100) / 100\n      };\n      const lastTransform = lastTransformsRef.current.get(i);\n      const hasChanged = !lastTransform || Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 || Math.abs(lastTransform.scale - newTransform.scale) > 0.001 || Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 || Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\n      if (hasChanged) {\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\n        card.style.transform = transform;\n        card.style.filter = filter;\n        lastTransformsRef.current.set(i, newTransform);\n      }\n\n      // Check if all cards are stacked (completion detection)\n      if (i === cardsRef.current.length - 1) {\n        const isFullyStacked = scrollTop >= triggerStart + itemStackDistance * 2;\n        if (isFullyStacked && !stackCompletedRef.current) {\n          stackCompletedRef.current = true;\n          onStackComplete === null || onStackComplete === void 0 ? void 0 : onStackComplete();\n        } else if (!isFullyStacked && stackCompletedRef.current) {\n          stackCompletedRef.current = false;\n        }\n      }\n    });\n    isUpdatingRef.current = false;\n  }, [itemScale, itemStackDistance, stackPosition, scaleEndPosition, baseScale, rotationAmount, blurAmount, onStackComplete, calculateProgress, parsePercentage]);\n  const handleScroll = useCallback(() => {\n    updateCardTransforms();\n  }, [updateCardTransforms]);\n  useLayoutEffect(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n    const cards = Array.from(scroller.querySelectorAll(\".scroll-stack-card\"));\n    cardsRef.current = cards;\n    const transformsCache = lastTransformsRef.current;\n    cards.forEach((card, i) => {\n      if (i < cards.length - 1) {\n        card.style.marginBottom = `${itemDistance}px`;\n      }\n      card.style.willChange = 'transform, filter';\n      card.style.transformOrigin = 'top center';\n      card.style.backfaceVisibility = 'hidden';\n      card.style.transform = 'translateZ(0)';\n      card.style.webkitTransform = 'translateZ(0)';\n      card.style.perspective = '1000px';\n      card.style.webkitPerspective = '1000px';\n    });\n\n    // Use simple scroll event listener instead of Lenis\n    scroller.addEventListener('scroll', handleScroll);\n    updateCardTransforms();\n    return () => {\n      scroller.removeEventListener('scroll', handleScroll);\n      stackCompletedRef.current = false;\n      cardsRef.current = [];\n      transformsCache.clear();\n      isUpdatingRef.current = false;\n    };\n  }, [itemDistance, itemScale, itemStackDistance, stackPosition, scaleEndPosition, baseScale, scaleDuration, rotationAmount, blurAmount, onStackComplete, handleScroll, updateCardTransforms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `scroll-stack-scroller ${className}`.trim(),\n    ref: scrollerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-stack-inner\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollStack, \"3SvosS45vIJoO+dYP/gbena2f7I=\");\n_c2 = ScrollStack;\nexport default ScrollStack;\nvar _c, _c2;\n$RefreshReg$(_c, \"ScrollStackItem\");\n$RefreshReg$(_c2, \"ScrollStack\");","map":{"version":3,"names":["useLayoutEffect","useRef","useCallback","jsxDEV","_jsxDEV","ScrollStackItem","children","itemClassName","className","trim","fileName","_jsxFileName","lineNumber","columnNumber","_c","ScrollStack","itemDistance","itemScale","itemStackDistance","stackPosition","scaleEndPosition","baseScale","scaleDuration","rotationAmount","blurAmount","onStackComplete","_s","scrollerRef","stackCompletedRef","cardsRef","lastTransformsRef","Map","isUpdatingRef","calculateProgress","scrollTop","start","end","parsePercentage","value","containerHeight","includes","parseFloat","updateCardTransforms","scroller","current","length","clientHeight","stackPositionPx","scaleEndPositionPx","forEach","card","i","cardTop","offsetTop","triggerStart","triggerEnd","scaleProgress","targetScale","scale","rotation","blur","topCardIndex","j","jCardTop","jTriggerStart","depthInStack","Math","max","translateY","maxTranslateY","offsetHeight","min","newTransform","round","lastTransform","get","hasChanged","abs","transform","filter","style","set","isFullyStacked","handleScroll","cards","Array","from","querySelectorAll","transformsCache","marginBottom","willChange","transformOrigin","backfaceVisibility","webkitTransform","perspective","webkitPerspective","addEventListener","removeEventListener","clear","ref","_c2","$RefreshReg$"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/src/components/Components/ScrollStack/ScrollStack.jsx"],"sourcesContent":["import { useLayoutEffect, useRef, useCallback } from \"react\";\nimport \"./ScrollStack.css\";\n\nexport const ScrollStackItem = ({ children, itemClassName = \"\" }) => (\n  <div className={`scroll-stack-card ${itemClassName}`.trim()}>{children}</div>\n);\n\nconst ScrollStack = ({\n  children,\n  className = \"\",\n  itemDistance = 100,\n  itemScale = 0.03,\n  itemStackDistance = 30,\n  stackPosition = \"20%\",\n  scaleEndPosition = \"10%\",\n  baseScale = 0.85,\n  scaleDuration = 0.5,\n  rotationAmount = 0,\n  blurAmount = 0,\n  onStackComplete,\n}) => {\n  const scrollerRef = useRef(null);\n  const stackCompletedRef = useRef(false);\n  const cardsRef = useRef([]);\n  const lastTransformsRef = useRef(new Map());\n  const isUpdatingRef = useRef(false);\n\n  const calculateProgress = useCallback((scrollTop, start, end) => {\n    if (scrollTop < start) return 0;\n    if (scrollTop > end) return 1;\n    return (scrollTop - start) / (end - start);\n  }, []);\n\n  const parsePercentage = useCallback((value, containerHeight) => {\n    if (typeof value === 'string' && value.includes('%')) {\n      return (parseFloat(value) / 100) * containerHeight;\n    }\n    return parseFloat(value);\n  }, []);\n\n  const updateCardTransforms = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller || !cardsRef.current.length || isUpdatingRef.current) return;\n\n    isUpdatingRef.current = true;\n\n    const scrollTop = scroller.scrollTop;\n    const containerHeight = scroller.clientHeight;\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\n\n    cardsRef.current.forEach((card, i) => {\n      if (!card) return;\n\n      const cardTop = card.offsetTop;\n      const triggerStart = cardTop - stackPositionPx - (itemStackDistance * i);\n      const triggerEnd = cardTop - scaleEndPositionPx;\n\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\n      const targetScale = baseScale + (i * itemScale);\n      const scale = 1 - scaleProgress * (1 - targetScale);\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\n\n      let blur = 0;\n      if (blurAmount) {\n        let topCardIndex = 0;\n        for (let j = 0; j < cardsRef.current.length; j++) {\n          const jCardTop = cardsRef.current[j].offsetTop;\n          const jTriggerStart = jCardTop - stackPositionPx - (itemStackDistance * j);\n          if (scrollTop >= jTriggerStart) {\n            topCardIndex = j;\n          }\n        }\n        \n        if (i < topCardIndex) {\n          const depthInStack = topCardIndex - i;\n          blur = Math.max(0, depthInStack * blurAmount);\n        }\n      }\n\n      // Keep cards within the container bounds - prevent scrolling out of view\n      let translateY = 0;\n      const maxTranslateY = containerHeight - card.offsetHeight;\n      \n      if (scrollTop >= triggerStart) {\n        translateY = scrollTop - cardTop + stackPositionPx + (itemStackDistance * i);\n        // Clamp the translateY to keep cards visible\n        translateY = Math.max(0, Math.min(translateY, maxTranslateY));\n      }\n\n      const newTransform = {\n        translateY: Math.round(translateY * 100) / 100,\n        scale: Math.round(scale * 1000) / 1000,\n        rotation: Math.round(rotation * 100) / 100,\n        blur: Math.round(blur * 100) / 100\n      };\n\n      const lastTransform = lastTransformsRef.current.get(i);\n      const hasChanged = !lastTransform || \n        Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 ||\n        Math.abs(lastTransform.scale - newTransform.scale) > 0.001 ||\n        Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 ||\n        Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\n\n      if (hasChanged) {\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\n\n        card.style.transform = transform;\n        card.style.filter = filter;\n        \n        lastTransformsRef.current.set(i, newTransform);\n      }\n\n      // Check if all cards are stacked (completion detection)\n      if (i === cardsRef.current.length - 1) {\n        const isFullyStacked = scrollTop >= (triggerStart + itemStackDistance * 2);\n        \n        if (isFullyStacked && !stackCompletedRef.current) {\n          stackCompletedRef.current = true;\n          onStackComplete?.();\n        } else if (!isFullyStacked && stackCompletedRef.current) {\n          stackCompletedRef.current = false;\n        }\n      }\n    });\n\n    isUpdatingRef.current = false;\n  }, [\n    itemScale,\n    itemStackDistance,\n    stackPosition,\n    scaleEndPosition,\n    baseScale,\n    rotationAmount,\n    blurAmount,\n    onStackComplete,\n    calculateProgress,\n    parsePercentage,\n  ]);\n\n  const handleScroll = useCallback(() => {\n    updateCardTransforms();\n  }, [updateCardTransforms]);\n\n  useLayoutEffect(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n\n    const cards = Array.from(scroller.querySelectorAll(\".scroll-stack-card\"));\n    cardsRef.current = cards;\n    const transformsCache = lastTransformsRef.current;\n\n    cards.forEach((card, i) => {\n      if (i < cards.length - 1) {\n        card.style.marginBottom = `${itemDistance}px`;\n      }\n      card.style.willChange = 'transform, filter';\n      card.style.transformOrigin = 'top center';\n      card.style.backfaceVisibility = 'hidden';\n      card.style.transform = 'translateZ(0)';\n      card.style.webkitTransform = 'translateZ(0)';\n      card.style.perspective = '1000px';\n      card.style.webkitPerspective = '1000px';\n    });\n\n    // Use simple scroll event listener instead of Lenis\n    scroller.addEventListener('scroll', handleScroll);\n\n    updateCardTransforms();\n\n    return () => {\n      scroller.removeEventListener('scroll', handleScroll);\n      stackCompletedRef.current = false;\n      cardsRef.current = [];\n      transformsCache.clear();\n      isUpdatingRef.current = false;\n    };\n  }, [\n    itemDistance,\n    itemScale,\n    itemStackDistance,\n    stackPosition,\n    scaleEndPosition,\n    baseScale,\n    scaleDuration,\n    rotationAmount,\n    blurAmount,\n    onStackComplete,\n    handleScroll,\n    updateCardTransforms,\n  ]);\n\n  return (\n    <div\n      className={`scroll-stack-scroller ${className}`.trim()}\n      ref={scrollerRef}\n    >\n      <div className=\"scroll-stack-inner\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollStack;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}