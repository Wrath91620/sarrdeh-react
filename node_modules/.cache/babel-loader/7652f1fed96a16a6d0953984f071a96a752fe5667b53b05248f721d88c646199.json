{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarrdeh Tech\\\\Desktop\\\\Sarrdeh-React\\\\sarrdeh-react\\\\src\\\\components\\\\Particles.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport * as OGL from \"ogl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultColors = [\"#ffffff\", \"#ffffff\", \"#ffffff\"];\nconst hexToRgb = hex => {\n  hex = hex.replace(/^#/, \"\");\n  if (hex.length === 3) {\n    hex = hex.split(\"\").map(c => c + c).join(\"\");\n  }\n  const int = parseInt(hex, 16);\n  const r = (int >> 16 & 255) / 255;\n  const g = (int >> 8 & 255) / 255;\n  const b = (int & 255) / 255;\n  return [r, g, b];\n};\nconst vertex = /* glsl */`\n  attribute vec3 position;\n  attribute vec4 random;\n  attribute vec3 color;\n  \n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float uTime;\n  uniform float uSpread;\n  uniform float uBaseSize;\n  uniform float uSizeRandomness;\n  \n  varying vec4 vRandom;\n  varying vec3 vColor;\n  varying vec3 vPosition;\n  \n  void main() {\n    vRandom = random;\n    vColor = color;\n    \n    vec3 pos = position * uSpread;\n    pos.z *= 10.0;\n    \n    vec4 mPos = modelMatrix * vec4(pos, 1.0);\n    float t = uTime;\n    mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\n    mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\n    mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\n    \n    vPosition = mPos.xyz;\n    vec4 mvPos = viewMatrix * mPos;\n    gl_PointSize = (uBaseSize * (1.0 + uSizeRandomness * (random.x - 0.5))) / length(mvPos.xyz);\n    gl_Position = projectionMatrix * mvPos;\n  }\n`;\nconst fragment = /* glsl */`\n  precision highp float;\n  \n  uniform float uTime;\n  uniform float uAlphaParticles;\n  uniform vec2 uResolution;\n  varying vec4 vRandom;\n  varying vec3 vColor;\n  varying vec3 vPosition;\n  \n  void main() {\n    vec2 uv = gl_PointCoord.xy;\n    float d = length(uv - vec2(0.5));\n    \n    // Calculate distance from center for fade effect\n    vec2 screenPos = gl_FragCoord.xy / uResolution.xy;\n    float distanceFromCenter = length(screenPos - vec2(0.5));\n    float fadeFactor = 1.0 - smoothstep(0.3, 0.8, distanceFromCenter);\n    \n    if(uAlphaParticles < 0.5) {\n      if(d > 0.5) {\n        discard;\n      }\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), fadeFactor);\n    } else {\n      float circle = smoothstep(0.5, 0.4, d) * 0.8;\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), circle * fadeFactor);\n    }\n  }\n`;\nconst Particles = ({\n  particleCount = 200,\n  particleSpread = 10,\n  speed = 0.1,\n  particleColors,\n  moveParticlesOnHover = false,\n  particleHoverFactor = 1,\n  alphaParticles = false,\n  particleBaseSize = 100,\n  sizeRandomness = 1,\n  cameraDistance = 20,\n  disableRotation = false,\n  className\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const mouseRef = useRef({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    const renderer = new OGL.Renderer({\n      depth: false,\n      alpha: true\n    });\n    const gl = renderer.gl;\n    container.appendChild(gl.canvas);\n    gl.clearColor(0, 0, 0, 0);\n    const camera = new OGL.Camera(gl, {\n      fov: 15\n    });\n    camera.position.set(0, 0, cameraDistance);\n    const count = particleCount;\n    const positions = new Float32Array(count * 3);\n    const randoms = new Float32Array(count * 4);\n    const colors = new Float32Array(count * 3);\n    const palette = particleColors && particleColors.length > 0 ? particleColors : defaultColors;\n    for (let i = 0; i < count; i++) {\n      let x, y, z, len;\n      do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        z = Math.random() * 2 - 1;\n        len = x * x + y * y + z * z;\n      } while (len > 1 || len === 0);\n      const r = Math.cbrt(Math.random());\n      positions.set([x * r, y * r, z * r], i * 3);\n      randoms.set([Math.random(), Math.random(), Math.random(), Math.random()], i * 4);\n      const col = hexToRgb(palette[Math.floor(Math.random() * palette.length)]);\n      colors.set(col, i * 3);\n    }\n    const geometry = new OGL.Geometry(gl, {\n      position: {\n        size: 3,\n        data: positions\n      },\n      random: {\n        size: 4,\n        data: randoms\n      },\n      color: {\n        size: 3,\n        data: colors\n      }\n    });\n    const program = new OGL.Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uSpread: {\n          value: particleSpread\n        },\n        uBaseSize: {\n          value: particleBaseSize\n        },\n        uSizeRandomness: {\n          value: sizeRandomness\n        },\n        uAlphaParticles: {\n          value: alphaParticles ? 1 : 0\n        },\n        uResolution: {\n          value: [gl.canvas.width, gl.canvas.height]\n        }\n      },\n      transparent: true,\n      depthTest: false\n    });\n    const resize = () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.perspective({\n        aspect: gl.canvas.width / gl.canvas.height\n      });\n      program.uniforms.uResolution.value = [gl.canvas.width, gl.canvas.height];\n    };\n    window.addEventListener(\"resize\", resize, false);\n    resize();\n    const handleMouseMove = e => {\n      const rect = container.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width * 2 - 1;\n      const y = -((e.clientY - rect.top) / rect.height * 2 - 1);\n      mouseRef.current = {\n        x,\n        y\n      };\n    };\n    if (moveParticlesOnHover) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n    }\n    const particles = new OGL.Mesh(gl, {\n      mode: gl.POINTS,\n      geometry,\n      program\n    });\n    let animationFrameId;\n    let lastTime = performance.now();\n    let elapsed = 0;\n    const update = t => {\n      animationFrameId = requestAnimationFrame(update);\n      const delta = t - lastTime;\n      lastTime = t;\n      elapsed += delta * speed;\n      program.uniforms.uTime.value = elapsed * 0.001;\n      if (moveParticlesOnHover) {\n        particles.position.x = -mouseRef.current.x * particleHoverFactor;\n        particles.position.y = -mouseRef.current.y * particleHoverFactor;\n      } else {\n        particles.position.x = 0;\n        particles.position.y = 0;\n      }\n      if (!disableRotation) {\n        particles.rotation.x = Math.sin(elapsed * 0.0002) * 0.1;\n        particles.rotation.y = Math.cos(elapsed * 0.0005) * 0.15;\n        particles.rotation.z += 0.01 * speed;\n      }\n      renderer.render({\n        scene: particles,\n        camera\n      });\n    };\n    animationFrameId = requestAnimationFrame(update);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n      if (moveParticlesOnHover) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n      }\n      cancelAnimationFrame(animationFrameId);\n      if (container.contains(gl.canvas)) {\n        container.removeChild(gl.canvas);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [particleCount, particleSpread, speed, moveParticlesOnHover, particleHoverFactor, alphaParticles, particleBaseSize, sizeRandomness, cameraDistance, disableRotation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `particles-container ${className}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(Particles, \"+nF1yJvQLVO//ZYCcNavPZmnV1A=\");\n_c = Particles;\nexport default Particles;\nvar _c;\n$RefreshReg$(_c, \"Particles\");","map":{"version":3,"names":["useEffect","useRef","OGL","jsxDEV","_jsxDEV","defaultColors","hexToRgb","hex","replace","length","split","map","c","join","int","parseInt","r","g","b","vertex","fragment","Particles","particleCount","particleSpread","speed","particleColors","moveParticlesOnHover","particleHoverFactor","alphaParticles","particleBaseSize","sizeRandomness","cameraDistance","disableRotation","className","_s","containerRef","mouseRef","x","y","container","current","renderer","Renderer","depth","alpha","gl","appendChild","canvas","clearColor","camera","Camera","fov","position","set","count","positions","Float32Array","randoms","colors","palette","i","z","len","Math","random","cbrt","col","floor","geometry","Geometry","size","data","color","program","Program","uniforms","uTime","value","uSpread","uBaseSize","uSizeRandomness","uAlphaParticles","uResolution","width","height","transparent","depthTest","resize","clientWidth","clientHeight","setSize","perspective","aspect","window","addEventListener","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","particles","Mesh","mode","POINTS","animationFrameId","lastTime","performance","now","elapsed","update","t","requestAnimationFrame","delta","rotation","sin","cos","render","scene","removeEventListener","cancelAnimationFrame","contains","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/src/components/Particles.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport * as OGL from \"ogl\";\r\n\r\n\r\n\r\nconst defaultColors = [\"#ffffff\", \"#ffffff\", \"#ffffff\"];\r\n\r\nconst hexToRgb = (hex) => {\r\n  hex = hex.replace(/^#/, \"\");\r\n  if (hex.length === 3) {\r\n    hex = hex.split(\"\").map((c) => c + c).join(\"\");\r\n  }\r\n  const int = parseInt(hex, 16);\r\n  const r = ((int >> 16) & 255) / 255;\r\n  const g = ((int >> 8) & 255) / 255;\r\n  const b = (int & 255) / 255;\r\n  return [r, g, b];\r\n};\r\n\r\nconst vertex = /* glsl */ `\r\n  attribute vec3 position;\r\n  attribute vec4 random;\r\n  attribute vec3 color;\r\n  \r\n  uniform mat4 modelMatrix;\r\n  uniform mat4 viewMatrix;\r\n  uniform mat4 projectionMatrix;\r\n  uniform float uTime;\r\n  uniform float uSpread;\r\n  uniform float uBaseSize;\r\n  uniform float uSizeRandomness;\r\n  \r\n  varying vec4 vRandom;\r\n  varying vec3 vColor;\r\n  varying vec3 vPosition;\r\n  \r\n  void main() {\r\n    vRandom = random;\r\n    vColor = color;\r\n    \r\n    vec3 pos = position * uSpread;\r\n    pos.z *= 10.0;\r\n    \r\n    vec4 mPos = modelMatrix * vec4(pos, 1.0);\r\n    float t = uTime;\r\n    mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\r\n    mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\r\n    mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\r\n    \r\n    vPosition = mPos.xyz;\r\n    vec4 mvPos = viewMatrix * mPos;\r\n    gl_PointSize = (uBaseSize * (1.0 + uSizeRandomness * (random.x - 0.5))) / length(mvPos.xyz);\r\n    gl_Position = projectionMatrix * mvPos;\r\n  }\r\n`;\r\n\r\nconst fragment = /* glsl */ `\r\n  precision highp float;\r\n  \r\n  uniform float uTime;\r\n  uniform float uAlphaParticles;\r\n  uniform vec2 uResolution;\r\n  varying vec4 vRandom;\r\n  varying vec3 vColor;\r\n  varying vec3 vPosition;\r\n  \r\n  void main() {\r\n    vec2 uv = gl_PointCoord.xy;\r\n    float d = length(uv - vec2(0.5));\r\n    \r\n    // Calculate distance from center for fade effect\r\n    vec2 screenPos = gl_FragCoord.xy / uResolution.xy;\r\n    float distanceFromCenter = length(screenPos - vec2(0.5));\r\n    float fadeFactor = 1.0 - smoothstep(0.3, 0.8, distanceFromCenter);\r\n    \r\n    if(uAlphaParticles < 0.5) {\r\n      if(d > 0.5) {\r\n        discard;\r\n      }\r\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), fadeFactor);\r\n    } else {\r\n      float circle = smoothstep(0.5, 0.4, d) * 0.8;\r\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), circle * fadeFactor);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Particles = ({\r\n  particleCount = 200,\r\n  particleSpread = 10,\r\n  speed = 0.1,\r\n  particleColors,\r\n  moveParticlesOnHover = false,\r\n  particleHoverFactor = 1,\r\n  alphaParticles = false,\r\n  particleBaseSize = 100,\r\n  sizeRandomness = 1,\r\n  cameraDistance = 20,\r\n  disableRotation = false,\r\n  className,\r\n}) => {\r\n  const containerRef = useRef(null);\r\n  const mouseRef = useRef({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const renderer = new OGL.Renderer({ depth: false, alpha: true });\r\n    const gl = renderer.gl;\r\n    container.appendChild(gl.canvas);\r\n    gl.clearColor(0, 0, 0, 0);\r\n\r\n    const camera = new OGL.Camera(gl, { fov: 15 });\r\n    camera.position.set(0, 0, cameraDistance);\r\n\r\n    const count = particleCount;\r\n    const positions = new Float32Array(count * 3);\r\n    const randoms = new Float32Array(count * 4);\r\n    const colors = new Float32Array(count * 3);\r\n    const palette = particleColors && particleColors.length > 0 ? particleColors : defaultColors;\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      let x, y, z, len;\r\n      do {\r\n        x = Math.random() * 2 - 1;\r\n        y = Math.random() * 2 - 1;\r\n        z = Math.random() * 2 - 1;\r\n        len = x * x + y * y + z * z;\r\n      } while (len > 1 || len === 0);\r\n      const r = Math.cbrt(Math.random());\r\n      positions.set([x * r, y * r, z * r], i * 3);\r\n      randoms.set([Math.random(), Math.random(), Math.random(), Math.random()], i * 4);\r\n      const col = hexToRgb(palette[Math.floor(Math.random() * palette.length)]);\r\n      colors.set(col, i * 3);\r\n    }\r\n\r\n    const geometry = new OGL.Geometry(gl, {\r\n      position: { size: 3, data: positions },\r\n      random: { size: 4, data: randoms },\r\n      color: { size: 3, data: colors },\r\n    });\r\n\r\n    const program = new OGL.Program(gl, {\r\n      vertex,\r\n      fragment,\r\n      uniforms: {\r\n        uTime: { value: 0 },\r\n        uSpread: { value: particleSpread },\r\n        uBaseSize: { value: particleBaseSize },\r\n        uSizeRandomness: { value: sizeRandomness },\r\n        uAlphaParticles: { value: alphaParticles ? 1 : 0 },\r\n        uResolution: { value: [gl.canvas.width, gl.canvas.height] },\r\n      },\r\n      transparent: true,\r\n      depthTest: false,\r\n    });\r\n\r\n    const resize = () => {\r\n      const width = container.clientWidth;\r\n      const height = container.clientHeight;\r\n      renderer.setSize(width, height);\r\n      camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });\r\n      program.uniforms.uResolution.value = [gl.canvas.width, gl.canvas.height];\r\n    };\r\n    window.addEventListener(\"resize\", resize, false);\r\n    resize();\r\n\r\n    const handleMouseMove = (e) => {\r\n      const rect = container.getBoundingClientRect();\r\n      const x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\r\n      const y = -(((e.clientY - rect.top) / rect.height) * 2 - 1);\r\n      mouseRef.current = { x, y };\r\n    };\r\n\r\n    if (moveParticlesOnHover) {\r\n      container.addEventListener(\"mousemove\", handleMouseMove);\r\n    }\r\n\r\n    const particles = new OGL.Mesh(gl, { mode: gl.POINTS, geometry, program });\r\n\r\n    let animationFrameId;\r\n    let lastTime = performance.now();\r\n    let elapsed = 0;\r\n\r\n    const update = (t) => {\r\n      animationFrameId = requestAnimationFrame(update);\r\n      const delta = t - lastTime;\r\n      lastTime = t;\r\n      elapsed += delta * speed;\r\n\r\n      program.uniforms.uTime.value = elapsed * 0.001;\r\n\r\n      if (moveParticlesOnHover) {\r\n        particles.position.x = -mouseRef.current.x * particleHoverFactor;\r\n        particles.position.y = -mouseRef.current.y * particleHoverFactor;\r\n      } else {\r\n        particles.position.x = 0;\r\n        particles.position.y = 0;\r\n      }\r\n\r\n      if (!disableRotation) {\r\n        particles.rotation.x = Math.sin(elapsed * 0.0002) * 0.1;\r\n        particles.rotation.y = Math.cos(elapsed * 0.0005) * 0.15;\r\n        particles.rotation.z += 0.01 * speed;\r\n      }\r\n\r\n      renderer.render({ scene: particles, camera });\r\n    };\r\n\r\n    animationFrameId = requestAnimationFrame(update);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resize);\r\n      if (moveParticlesOnHover) {\r\n        container.removeEventListener(\"mousemove\", handleMouseMove);\r\n      }\r\n      cancelAnimationFrame(animationFrameId);\r\n      if (container.contains(gl.canvas)) {\r\n        container.removeChild(gl.canvas);\r\n      }\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    particleCount,\r\n    particleSpread,\r\n    speed,\r\n    moveParticlesOnHover,\r\n    particleHoverFactor,\r\n    alphaParticles,\r\n    particleBaseSize,\r\n    sizeRandomness,\r\n    cameraDistance,\r\n    disableRotation,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`particles-container ${className}`}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Particles;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}