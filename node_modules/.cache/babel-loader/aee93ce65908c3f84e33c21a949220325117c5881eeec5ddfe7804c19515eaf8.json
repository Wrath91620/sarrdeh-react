{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarrdeh Tech\\\\Desktop\\\\Sarrdeh-React\\\\sarrdeh-react\\\\src\\\\components\\\\Components\\\\ScrollStack\\\\ScrollStack.jsx\",\n  _s = $RefreshSig$();\nimport { useLayoutEffect, useRef, useCallback } from \"react\";\nimport Lenis from \"lenis\";\nimport \"./ScrollStack.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ScrollStackItem = ({\n  children,\n  itemClassName = \"\"\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `scroll-stack-card ${itemClassName}`.trim(),\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = ScrollStackItem;\nconst ScrollStack = ({\n  children,\n  className = \"\",\n  itemDistance = 100,\n  itemScale = 0.03,\n  itemStackDistance = 30,\n  stackPosition = \"20%\",\n  scaleEndPosition = \"10%\",\n  baseScale = 0.85,\n  scaleDuration = 0.5,\n  rotationAmount = 0,\n  blurAmount = 0,\n  onStackComplete\n}) => {\n  _s();\n  const scrollerRef = useRef(null);\n  const stackCompletedRef = useRef(false);\n  const animationFrameRef = useRef(null);\n  const lenisRef = useRef(null);\n  const cardsRef = useRef([]);\n  const lastTransformsRef = useRef(new Map());\n  const isUpdatingRef = useRef(false);\n  const calculateProgress = useCallback((scrollTop, start, end) => {\n    if (scrollTop < start) return 0;\n    if (scrollTop > end) return 1;\n    return (scrollTop - start) / (end - start);\n  }, []);\n  const parsePercentage = useCallback((value, containerHeight) => {\n    if (typeof value === 'string' && value.includes('%')) {\n      return parseFloat(value) / 100 * containerHeight;\n    }\n    return parseFloat(value);\n  }, []);\n  const updateCardTransforms = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller || !cardsRef.current.length || isUpdatingRef.current) return;\n    isUpdatingRef.current = true;\n    const scrollTop = scroller.scrollTop;\n    const containerHeight = scroller.clientHeight;\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\n    cardsRef.current.forEach((card, i) => {\n      if (!card) return;\n      const cardTop = card.offsetTop;\n      const triggerStart = cardTop - stackPositionPx - itemStackDistance * i;\n      const triggerEnd = cardTop - scaleEndPositionPx;\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\n      const targetScale = baseScale + i * itemScale;\n      const scale = 1 - scaleProgress * (1 - targetScale);\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\n      let blur = 0;\n      if (blurAmount) {\n        let topCardIndex = 0;\n        for (let j = 0; j < cardsRef.current.length; j++) {\n          const jCardTop = cardsRef.current[j].offsetTop;\n          const jTriggerStart = jCardTop - stackPositionPx - itemStackDistance * j;\n          if (scrollTop >= jTriggerStart) {\n            topCardIndex = j;\n          }\n        }\n        if (i < topCardIndex) {\n          const depthInStack = topCardIndex - i;\n          blur = Math.max(0, depthInStack * blurAmount);\n        }\n      }\n\n      // Keep cards within the container bounds - prevent scrolling out of view\n      let translateY = 0;\n      const maxTranslateY = containerHeight - card.offsetHeight;\n      if (scrollTop >= triggerStart) {\n        translateY = scrollTop - cardTop + stackPositionPx + itemStackDistance * i;\n        // Clamp the translateY to keep cards visible\n        translateY = Math.max(0, Math.min(translateY, maxTranslateY));\n      }\n      const newTransform = {\n        translateY: Math.round(translateY * 100) / 100,\n        scale: Math.round(scale * 1000) / 1000,\n        rotation: Math.round(rotation * 100) / 100,\n        blur: Math.round(blur * 100) / 100\n      };\n      const lastTransform = lastTransformsRef.current.get(i);\n      const hasChanged = !lastTransform || Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 || Math.abs(lastTransform.scale - newTransform.scale) > 0.001 || Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 || Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\n      if (hasChanged) {\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\n        card.style.transform = transform;\n        card.style.filter = filter;\n        lastTransformsRef.current.set(i, newTransform);\n      }\n\n      // Check if all cards are stacked (completion detection)\n      if (i === cardsRef.current.length - 1) {\n        const isFullyStacked = scrollTop >= triggerStart + itemStackDistance * 2;\n        if (isFullyStacked && !stackCompletedRef.current) {\n          stackCompletedRef.current = true;\n          onStackComplete === null || onStackComplete === void 0 ? void 0 : onStackComplete();\n        } else if (!isFullyStacked && stackCompletedRef.current) {\n          stackCompletedRef.current = false;\n        }\n      }\n    });\n    isUpdatingRef.current = false;\n  }, [itemScale, itemStackDistance, stackPosition, scaleEndPosition, baseScale, rotationAmount, blurAmount, onStackComplete, calculateProgress, parsePercentage]);\n  const handleScroll = useCallback(() => {\n    updateCardTransforms();\n  }, [updateCardTransforms]);\n  const setupLenis = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n    const lenis = new Lenis({\n      wrapper: scroller,\n      content: scroller.querySelector('.scroll-stack-inner'),\n      duration: 1.2,\n      easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n      smoothWheel: true,\n      touchMultiplier: 2,\n      infinite: false,\n      gestureOrientationHandler: true,\n      normalizeWheel: true,\n      wheelMultiplier: 1,\n      touchInertiaMultiplier: 35,\n      lerp: 0.1,\n      syncTouch: true,\n      syncTouchLerp: 0.075,\n      touchInertia: 0.6\n    });\n    lenis.on('scroll', handleScroll);\n    const raf = time => {\n      lenis.raf(time);\n      animationFrameRef.current = requestAnimationFrame(raf);\n    };\n    animationFrameRef.current = requestAnimationFrame(raf);\n    lenisRef.current = lenis;\n    return lenis;\n  }, [handleScroll]);\n  useLayoutEffect(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n    const cards = Array.from(scroller.querySelectorAll(\".scroll-stack-card\"));\n    cardsRef.current = cards;\n    const transformsCache = lastTransformsRef.current;\n    cards.forEach((card, i) => {\n      if (i < cards.length - 1) {\n        card.style.marginBottom = `${itemDistance}px`;\n      }\n      card.style.willChange = 'transform, filter';\n      card.style.transformOrigin = 'top center';\n      card.style.backfaceVisibility = 'hidden';\n      card.style.transform = 'translateZ(0)';\n      card.style.webkitTransform = 'translateZ(0)';\n      card.style.perspective = '1000px';\n      card.style.webkitPerspective = '1000px';\n    });\n    setupLenis();\n    updateCardTransforms();\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (lenisRef.current) {\n        lenisRef.current.destroy();\n      }\n      stackCompletedRef.current = false;\n      cardsRef.current = [];\n      transformsCache.clear();\n      isUpdatingRef.current = false;\n    };\n  }, [itemDistance, itemScale, itemStackDistance, stackPosition, scaleEndPosition, baseScale, scaleDuration, rotationAmount, blurAmount, onStackComplete, setupLenis, updateCardTransforms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `scroll-stack-scroller ${className}`.trim(),\n    ref: scrollerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-stack-inner\",\n      children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scroll-stack-end\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollStack, \"jQanoUh9Z32xcLUSw++jwwTDx3U=\");\n_c2 = ScrollStack;\nexport default ScrollStack;\nvar _c, _c2;\n$RefreshReg$(_c, \"ScrollStackItem\");\n$RefreshReg$(_c2, \"ScrollStack\");","map":{"version":3,"names":["useLayoutEffect","useRef","useCallback","Lenis","jsxDEV","_jsxDEV","ScrollStackItem","children","itemClassName","className","trim","fileName","_jsxFileName","lineNumber","columnNumber","_c","ScrollStack","itemDistance","itemScale","itemStackDistance","stackPosition","scaleEndPosition","baseScale","scaleDuration","rotationAmount","blurAmount","onStackComplete","_s","scrollerRef","stackCompletedRef","animationFrameRef","lenisRef","cardsRef","lastTransformsRef","Map","isUpdatingRef","calculateProgress","scrollTop","start","end","parsePercentage","value","containerHeight","includes","parseFloat","updateCardTransforms","scroller","current","length","clientHeight","stackPositionPx","scaleEndPositionPx","forEach","card","i","cardTop","offsetTop","triggerStart","triggerEnd","scaleProgress","targetScale","scale","rotation","blur","topCardIndex","j","jCardTop","jTriggerStart","depthInStack","Math","max","translateY","maxTranslateY","offsetHeight","min","newTransform","round","lastTransform","get","hasChanged","abs","transform","filter","style","set","isFullyStacked","handleScroll","setupLenis","lenis","wrapper","content","querySelector","duration","easing","t","pow","smoothWheel","touchMultiplier","infinite","gestureOrientationHandler","normalizeWheel","wheelMultiplier","touchInertiaMultiplier","lerp","syncTouch","syncTouchLerp","touchInertia","on","raf","time","requestAnimationFrame","cards","Array","from","querySelectorAll","transformsCache","marginBottom","willChange","transformOrigin","backfaceVisibility","webkitTransform","perspective","webkitPerspective","cancelAnimationFrame","destroy","clear","ref","_c2","$RefreshReg$"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/src/components/Components/ScrollStack/ScrollStack.jsx"],"sourcesContent":["import { useLayoutEffect, useRef, useCallback } from \"react\";\nimport Lenis from \"lenis\";\nimport \"./ScrollStack.css\";\n\nexport const ScrollStackItem = ({ children, itemClassName = \"\" }) => (\n  <div className={`scroll-stack-card ${itemClassName}`.trim()}>{children}</div>\n);\n\nconst ScrollStack = ({\n  children,\n  className = \"\",\n  itemDistance = 100,\n  itemScale = 0.03,\n  itemStackDistance = 30,\n  stackPosition = \"20%\",\n  scaleEndPosition = \"10%\",\n  baseScale = 0.85,\n  scaleDuration = 0.5,\n  rotationAmount = 0,\n  blurAmount = 0,\n  onStackComplete,\n}) => {\n  const scrollerRef = useRef(null);\n  const stackCompletedRef = useRef(false);\n  const animationFrameRef = useRef(null);\n  const lenisRef = useRef(null);\n  const cardsRef = useRef([]);\n  const lastTransformsRef = useRef(new Map());\n  const isUpdatingRef = useRef(false);\n\n  const calculateProgress = useCallback((scrollTop, start, end) => {\n    if (scrollTop < start) return 0;\n    if (scrollTop > end) return 1;\n    return (scrollTop - start) / (end - start);\n  }, []);\n\n  const parsePercentage = useCallback((value, containerHeight) => {\n    if (typeof value === 'string' && value.includes('%')) {\n      return (parseFloat(value) / 100) * containerHeight;\n    }\n    return parseFloat(value);\n  }, []);\n\n  const updateCardTransforms = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller || !cardsRef.current.length || isUpdatingRef.current) return;\n\n    isUpdatingRef.current = true;\n\n    const scrollTop = scroller.scrollTop;\n    const containerHeight = scroller.clientHeight;\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\n\n    cardsRef.current.forEach((card, i) => {\n      if (!card) return;\n\n      const cardTop = card.offsetTop;\n      const triggerStart = cardTop - stackPositionPx - (itemStackDistance * i);\n      const triggerEnd = cardTop - scaleEndPositionPx;\n\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\n      const targetScale = baseScale + (i * itemScale);\n      const scale = 1 - scaleProgress * (1 - targetScale);\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\n\n      let blur = 0;\n      if (blurAmount) {\n        let topCardIndex = 0;\n        for (let j = 0; j < cardsRef.current.length; j++) {\n          const jCardTop = cardsRef.current[j].offsetTop;\n          const jTriggerStart = jCardTop - stackPositionPx - (itemStackDistance * j);\n          if (scrollTop >= jTriggerStart) {\n            topCardIndex = j;\n          }\n        }\n        \n        if (i < topCardIndex) {\n          const depthInStack = topCardIndex - i;\n          blur = Math.max(0, depthInStack * blurAmount);\n        }\n      }\n\n      // Keep cards within the container bounds - prevent scrolling out of view\n      let translateY = 0;\n      const maxTranslateY = containerHeight - card.offsetHeight;\n      \n      if (scrollTop >= triggerStart) {\n        translateY = scrollTop - cardTop + stackPositionPx + (itemStackDistance * i);\n        // Clamp the translateY to keep cards visible\n        translateY = Math.max(0, Math.min(translateY, maxTranslateY));\n      }\n\n      const newTransform = {\n        translateY: Math.round(translateY * 100) / 100,\n        scale: Math.round(scale * 1000) / 1000,\n        rotation: Math.round(rotation * 100) / 100,\n        blur: Math.round(blur * 100) / 100\n      };\n\n      const lastTransform = lastTransformsRef.current.get(i);\n      const hasChanged = !lastTransform || \n        Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 ||\n        Math.abs(lastTransform.scale - newTransform.scale) > 0.001 ||\n        Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 ||\n        Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\n\n      if (hasChanged) {\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\n\n        card.style.transform = transform;\n        card.style.filter = filter;\n        \n        lastTransformsRef.current.set(i, newTransform);\n      }\n\n      // Check if all cards are stacked (completion detection)\n      if (i === cardsRef.current.length - 1) {\n        const isFullyStacked = scrollTop >= (triggerStart + itemStackDistance * 2);\n        \n        if (isFullyStacked && !stackCompletedRef.current) {\n          stackCompletedRef.current = true;\n          onStackComplete?.();\n        } else if (!isFullyStacked && stackCompletedRef.current) {\n          stackCompletedRef.current = false;\n        }\n      }\n    });\n\n    isUpdatingRef.current = false;\n  }, [\n    itemScale,\n    itemStackDistance,\n    stackPosition,\n    scaleEndPosition,\n    baseScale,\n    rotationAmount,\n    blurAmount,\n    onStackComplete,\n    calculateProgress,\n    parsePercentage,\n  ]);\n\n  const handleScroll = useCallback(() => {\n    updateCardTransforms();\n  }, [updateCardTransforms]);\n\n  const setupLenis = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n\n    const lenis = new Lenis({\n      wrapper: scroller,\n      content: scroller.querySelector('.scroll-stack-inner'),\n      duration: 1.2,\n      easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n      smoothWheel: true,\n      touchMultiplier: 2,\n      infinite: false,\n      gestureOrientationHandler: true,\n      normalizeWheel: true,\n      wheelMultiplier: 1,\n      touchInertiaMultiplier: 35,\n      lerp: 0.1,\n      syncTouch: true,\n      syncTouchLerp: 0.075,\n      touchInertia: 0.6,\n    });\n\n    lenis.on('scroll', handleScroll);\n\n    const raf = (time) => {\n      lenis.raf(time);\n      animationFrameRef.current = requestAnimationFrame(raf);\n    };\n    animationFrameRef.current = requestAnimationFrame(raf);\n\n    lenisRef.current = lenis;\n    return lenis;\n  }, [handleScroll]);\n\n  useLayoutEffect(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n\n    const cards = Array.from(scroller.querySelectorAll(\".scroll-stack-card\"));\n    cardsRef.current = cards;\n    const transformsCache = lastTransformsRef.current;\n\n    cards.forEach((card, i) => {\n      if (i < cards.length - 1) {\n        card.style.marginBottom = `${itemDistance}px`;\n      }\n      card.style.willChange = 'transform, filter';\n      card.style.transformOrigin = 'top center';\n      card.style.backfaceVisibility = 'hidden';\n      card.style.transform = 'translateZ(0)';\n      card.style.webkitTransform = 'translateZ(0)';\n      card.style.perspective = '1000px';\n      card.style.webkitPerspective = '1000px';\n    });\n\n    setupLenis();\n\n    updateCardTransforms();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (lenisRef.current) {\n        lenisRef.current.destroy();\n      }\n      stackCompletedRef.current = false;\n      cardsRef.current = [];\n      transformsCache.clear();\n      isUpdatingRef.current = false;\n    };\n  }, [\n    itemDistance,\n    itemScale,\n    itemStackDistance,\n    stackPosition,\n    scaleEndPosition,\n    baseScale,\n    scaleDuration,\n    rotationAmount,\n    blurAmount,\n    onStackComplete,\n    setupLenis,\n    updateCardTransforms,\n  ]);\n\n  return (\n    <div\n      className={`scroll-stack-scroller ${className}`.trim()}\n      ref={scrollerRef}\n    >\n      <div className=\"scroll-stack-inner\">\n        {children}\n        {/* Spacer so the last pin can release cleanly */}\n        <div className=\"scroll-stack-end\" />\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollStack;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}