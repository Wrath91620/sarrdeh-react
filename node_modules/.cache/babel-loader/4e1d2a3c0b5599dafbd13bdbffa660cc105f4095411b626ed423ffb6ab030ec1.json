{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarrdeh Tech\\\\Desktop\\\\Sarrdeh-React\\\\sarrdeh-react\\\\src\\\\components\\\\Components\\\\ScrollStack\\\\ScrollStack.jsx\",\n  _s = $RefreshSig$();\nimport { useLayoutEffect, useRef, useCallback } from \"react\";\nimport Lenis from \"lenis\";\nimport \"./ScrollStack.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ScrollStackItem = ({\n  children,\n  itemClassName = \"\"\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `scroll-stack-card ${itemClassName}`.trim(),\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = ScrollStackItem;\nconst ScrollStack = ({\n  children,\n  className = \"\",\n  itemDistance = 100,\n  itemScale = 0.03,\n  itemStackDistance = 30,\n  stackPosition = \"20%\",\n  scaleEndPosition = \"10%\",\n  baseScale = 0.85,\n  scaleDuration = 0.5,\n  rotationAmount = 0,\n  blurAmount = 0,\n  onStackComplete\n}) => {\n  _s();\n  const scrollerRef = useRef(null);\n  const stackCompletedRef = useRef(false);\n  const animationFrameRef = useRef(null);\n  const lenisRef = useRef(null);\n  const cardsRef = useRef([]);\n  const lastTransformsRef = useRef(new Map());\n  const isUpdatingRef = useRef(false);\n  const calculateProgress = useCallback((scrollTop, start, end) => {\n    if (scrollTop < start) return 0;\n    if (scrollTop > end) return 1;\n    return (scrollTop - start) / (end - start);\n  }, []);\n  const parsePercentage = useCallback((value, containerHeight) => {\n    if (typeof value === 'string' && value.includes('%')) {\n      return parseFloat(value) / 100 * containerHeight;\n    }\n    return parseFloat(value);\n  }, []);\n  const updateCardTransforms = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller || !cardsRef.current.length || isUpdatingRef.current) return;\n    isUpdatingRef.current = true;\n    const scrollTop = scroller.scrollTop;\n    const containerHeight = scroller.clientHeight;\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\n    const endElement = scroller.querySelector('.scroll-stack-end');\n    const endElementTop = endElement ? endElement.offsetTop : 0;\n    cardsRef.current.forEach((card, i) => {\n      if (!card) return;\n      const cardTop = card.offsetTop;\n      const triggerStart = cardTop - stackPositionPx - itemStackDistance * i;\n      const triggerEnd = cardTop - scaleEndPositionPx;\n      const pinStart = cardTop - stackPositionPx - itemStackDistance * i;\n      const pinEnd = endElementTop - containerHeight / 2;\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\n      const targetScale = baseScale + i * itemScale;\n      const scale = 1 - scaleProgress * (1 - targetScale);\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\n      let blur = 0;\n      if (blurAmount) {\n        let topCardIndex = 0;\n        for (let j = 0; j < cardsRef.current.length; j++) {\n          const jCardTop = cardsRef.current[j].offsetTop;\n          const jTriggerStart = jCardTop - stackPositionPx - itemStackDistance * j;\n          if (scrollTop >= jTriggerStart) {\n            topCardIndex = j;\n          }\n        }\n        if (i < topCardIndex) {\n          const depthInStack = topCardIndex - i;\n          blur = Math.max(0, depthInStack * blurAmount);\n        }\n      }\n      let translateY = 0;\n      const isPinned = scrollTop >= pinStart && scrollTop <= pinEnd;\n      if (isPinned) {\n        translateY = scrollTop - cardTop + stackPositionPx + itemStackDistance * i;\n      } else if (scrollTop > pinEnd) {\n        translateY = pinEnd - cardTop + stackPositionPx + itemStackDistance * i;\n      }\n      const newTransform = {\n        translateY: Math.round(translateY * 100) / 100,\n        scale: Math.round(scale * 1000) / 1000,\n        rotation: Math.round(rotation * 100) / 100,\n        blur: Math.round(blur * 100) / 100\n      };\n      const lastTransform = lastTransformsRef.current.get(i);\n      const hasChanged = !lastTransform || Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 || Math.abs(lastTransform.scale - newTransform.scale) > 0.001 || Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 || Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\n      if (hasChanged) {\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\n        card.style.transform = transform;\n        card.style.filter = filter;\n        lastTransformsRef.current.set(i, newTransform);\n      }\n      if (i === cardsRef.current.length - 1) {\n        const isInView = scrollTop >= pinStart && scrollTop <= pinEnd;\n        if (isInView && !stackCompletedRef.current) {\n          stackCompletedRef.current = true;\n          onStackComplete === null || onStackComplete === void 0 ? void 0 : onStackComplete();\n        } else if (!isInView && stackCompletedRef.current) {\n          stackCompletedRef.current = false;\n        }\n      }\n    });\n    isUpdatingRef.current = false;\n  }, [itemScale, itemStackDistance, stackPosition, scaleEndPosition, baseScale, rotationAmount, blurAmount, onStackComplete, calculateProgress, parsePercentage]);\n  const handleScroll = useCallback(() => {\n    updateCardTransforms();\n  }, [updateCardTransforms]);\n  const setupLenis = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n    const lenis = new Lenis({\n      wrapper: scroller,\n      content: scroller.querySelector('.scroll-stack-inner'),\n      duration: 1.2,\n      easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n      smoothWheel: true,\n      touchMultiplier: 2,\n      infinite: false,\n      gestureOrientationHandler: true,\n      normalizeWheel: true,\n      wheelMultiplier: 1,\n      touchInertiaMultiplier: 35,\n      lerp: 0.1,\n      syncTouch: true,\n      syncTouchLerp: 0.075,\n      touchInertia: 0.6\n    });\n    lenis.on('scroll', handleScroll);\n    const raf = time => {\n      lenis.raf(time);\n      animationFrameRef.current = requestAnimationFrame(raf);\n    };\n    animationFrameRef.current = requestAnimationFrame(raf);\n    lenisRef.current = lenis;\n    return lenis;\n  }, [handleScroll]);\n  useLayoutEffect(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n    const cards = Array.from(scroller.querySelectorAll(\".scroll-stack-card\"));\n    cardsRef.current = cards;\n    const transformsCache = lastTransformsRef.current;\n    cards.forEach((card, i) => {\n      if (i < cards.length - 1) {\n        card.style.marginBottom = `${itemDistance}px`;\n      }\n      card.style.willChange = 'transform, filter';\n      card.style.transformOrigin = 'top center';\n      card.style.backfaceVisibility = 'hidden';\n      card.style.transform = 'translateZ(0)';\n      card.style.webkitTransform = 'translateZ(0)';\n      card.style.perspective = '1000px';\n      card.style.webkitPerspective = '1000px';\n    });\n    setupLenis();\n    updateCardTransforms();\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (lenisRef.current) {\n        lenisRef.current.destroy();\n      }\n      stackCompletedRef.current = false;\n      cardsRef.current = [];\n      transformsCache.clear();\n      isUpdatingRef.current = false;\n    };\n  }, [itemDistance, itemScale, itemStackDistance, stackPosition, scaleEndPosition, baseScale, scaleDuration, rotationAmount, blurAmount, onStackComplete, setupLenis, updateCardTransforms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `scroll-stack-scroller ${className}`.trim(),\n    ref: scrollerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-stack-inner\",\n      children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scroll-stack-end\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollStack, \"jQanoUh9Z32xcLUSw++jwwTDx3U=\");\n_c2 = ScrollStack;\nexport default ScrollStack;\nvar _c, _c2;\n$RefreshReg$(_c, \"ScrollStackItem\");\n$RefreshReg$(_c2, \"ScrollStack\");","map":{"version":3,"names":["useLayoutEffect","useRef","useCallback","Lenis","jsxDEV","_jsxDEV","ScrollStackItem","children","itemClassName","className","trim","fileName","_jsxFileName","lineNumber","columnNumber","_c","ScrollStack","itemDistance","itemScale","itemStackDistance","stackPosition","scaleEndPosition","baseScale","scaleDuration","rotationAmount","blurAmount","onStackComplete","_s","scrollerRef","stackCompletedRef","animationFrameRef","lenisRef","cardsRef","lastTransformsRef","Map","isUpdatingRef","calculateProgress","scrollTop","start","end","parsePercentage","value","containerHeight","includes","parseFloat","updateCardTransforms","scroller","current","length","clientHeight","stackPositionPx","scaleEndPositionPx","endElement","querySelector","endElementTop","offsetTop","forEach","card","i","cardTop","triggerStart","triggerEnd","pinStart","pinEnd","scaleProgress","targetScale","scale","rotation","blur","topCardIndex","j","jCardTop","jTriggerStart","depthInStack","Math","max","translateY","isPinned","newTransform","round","lastTransform","get","hasChanged","abs","transform","filter","style","set","isInView","handleScroll","setupLenis","lenis","wrapper","content","duration","easing","t","min","pow","smoothWheel","touchMultiplier","infinite","gestureOrientationHandler","normalizeWheel","wheelMultiplier","touchInertiaMultiplier","lerp","syncTouch","syncTouchLerp","touchInertia","on","raf","time","requestAnimationFrame","cards","Array","from","querySelectorAll","transformsCache","marginBottom","willChange","transformOrigin","backfaceVisibility","webkitTransform","perspective","webkitPerspective","cancelAnimationFrame","destroy","clear","ref","_c2","$RefreshReg$"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/src/components/Components/ScrollStack/ScrollStack.jsx"],"sourcesContent":["import { useLayoutEffect, useRef, useCallback } from \"react\";\nimport Lenis from \"lenis\";\nimport \"./ScrollStack.css\";\n\nexport const ScrollStackItem = ({ children, itemClassName = \"\" }) => (\n  <div className={`scroll-stack-card ${itemClassName}`.trim()}>{children}</div>\n);\n\nconst ScrollStack = ({\n  children,\n  className = \"\",\n  itemDistance = 100,\n  itemScale = 0.03,\n  itemStackDistance = 30,\n  stackPosition = \"20%\",\n  scaleEndPosition = \"10%\",\n  baseScale = 0.85,\n  scaleDuration = 0.5,\n  rotationAmount = 0,\n  blurAmount = 0,\n  onStackComplete,\n}) => {\n  const scrollerRef = useRef(null);\n  const stackCompletedRef = useRef(false);\n  const animationFrameRef = useRef(null);\n  const lenisRef = useRef(null);\n  const cardsRef = useRef([]);\n  const lastTransformsRef = useRef(new Map());\n  const isUpdatingRef = useRef(false);\n\n  const calculateProgress = useCallback((scrollTop, start, end) => {\n    if (scrollTop < start) return 0;\n    if (scrollTop > end) return 1;\n    return (scrollTop - start) / (end - start);\n  }, []);\n\n  const parsePercentage = useCallback((value, containerHeight) => {\n    if (typeof value === 'string' && value.includes('%')) {\n      return (parseFloat(value) / 100) * containerHeight;\n    }\n    return parseFloat(value);\n  }, []);\n\n  const updateCardTransforms = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller || !cardsRef.current.length || isUpdatingRef.current) return;\n\n    isUpdatingRef.current = true;\n\n    const scrollTop = scroller.scrollTop;\n    const containerHeight = scroller.clientHeight;\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\n    const endElement = scroller.querySelector('.scroll-stack-end');\n    const endElementTop = endElement ? endElement.offsetTop : 0;\n\n    cardsRef.current.forEach((card, i) => {\n      if (!card) return;\n\n      const cardTop = card.offsetTop;\n      const triggerStart = cardTop - stackPositionPx - (itemStackDistance * i);\n      const triggerEnd = cardTop - scaleEndPositionPx;\n      const pinStart = cardTop - stackPositionPx - (itemStackDistance * i);\n      const pinEnd = endElementTop - containerHeight / 2;\n\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\n      const targetScale = baseScale + (i * itemScale);\n      const scale = 1 - scaleProgress * (1 - targetScale);\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\n\n      let blur = 0;\n      if (blurAmount) {\n        let topCardIndex = 0;\n        for (let j = 0; j < cardsRef.current.length; j++) {\n          const jCardTop = cardsRef.current[j].offsetTop;\n          const jTriggerStart = jCardTop - stackPositionPx - (itemStackDistance * j);\n          if (scrollTop >= jTriggerStart) {\n            topCardIndex = j;\n          }\n        }\n        \n        if (i < topCardIndex) {\n          const depthInStack = topCardIndex - i;\n          blur = Math.max(0, depthInStack * blurAmount);\n        }\n      }\n\n      let translateY = 0;\n      const isPinned = scrollTop >= pinStart && scrollTop <= pinEnd;\n      \n      if (isPinned) {\n        translateY = scrollTop - cardTop + stackPositionPx + (itemStackDistance * i);\n      } else if (scrollTop > pinEnd) {\n        translateY = pinEnd - cardTop + stackPositionPx + (itemStackDistance * i);\n      }\n\n      const newTransform = {\n        translateY: Math.round(translateY * 100) / 100,\n        scale: Math.round(scale * 1000) / 1000,\n        rotation: Math.round(rotation * 100) / 100,\n        blur: Math.round(blur * 100) / 100\n      };\n\n      const lastTransform = lastTransformsRef.current.get(i);\n      const hasChanged = !lastTransform || \n        Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 ||\n        Math.abs(lastTransform.scale - newTransform.scale) > 0.001 ||\n        Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 ||\n        Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\n\n      if (hasChanged) {\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\n\n        card.style.transform = transform;\n        card.style.filter = filter;\n        \n        lastTransformsRef.current.set(i, newTransform);\n      }\n\n      if (i === cardsRef.current.length - 1) {\n        const isInView = scrollTop >= pinStart && scrollTop <= pinEnd;\n        if (isInView && !stackCompletedRef.current) {\n          stackCompletedRef.current = true;\n          onStackComplete?.();\n        } else if (!isInView && stackCompletedRef.current) {\n          stackCompletedRef.current = false;\n        }\n      }\n    });\n\n    isUpdatingRef.current = false;\n  }, [\n    itemScale,\n    itemStackDistance,\n    stackPosition,\n    scaleEndPosition,\n    baseScale,\n    rotationAmount,\n    blurAmount,\n    onStackComplete,\n    calculateProgress,\n    parsePercentage,\n  ]);\n\n  const handleScroll = useCallback(() => {\n    updateCardTransforms();\n  }, [updateCardTransforms]);\n\n  const setupLenis = useCallback(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n\n    const lenis = new Lenis({\n      wrapper: scroller,\n      content: scroller.querySelector('.scroll-stack-inner'),\n      duration: 1.2,\n      easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n      smoothWheel: true,\n      touchMultiplier: 2,\n      infinite: false,\n      gestureOrientationHandler: true,\n      normalizeWheel: true,\n      wheelMultiplier: 1,\n      touchInertiaMultiplier: 35,\n      lerp: 0.1,\n      syncTouch: true,\n      syncTouchLerp: 0.075,\n      touchInertia: 0.6,\n    });\n\n    lenis.on('scroll', handleScroll);\n\n    const raf = (time) => {\n      lenis.raf(time);\n      animationFrameRef.current = requestAnimationFrame(raf);\n    };\n    animationFrameRef.current = requestAnimationFrame(raf);\n\n    lenisRef.current = lenis;\n    return lenis;\n  }, [handleScroll]);\n\n  useLayoutEffect(() => {\n    const scroller = scrollerRef.current;\n    if (!scroller) return;\n\n    const cards = Array.from(scroller.querySelectorAll(\".scroll-stack-card\"));\n    cardsRef.current = cards;\n    const transformsCache = lastTransformsRef.current;\n\n    cards.forEach((card, i) => {\n      if (i < cards.length - 1) {\n        card.style.marginBottom = `${itemDistance}px`;\n      }\n      card.style.willChange = 'transform, filter';\n      card.style.transformOrigin = 'top center';\n      card.style.backfaceVisibility = 'hidden';\n      card.style.transform = 'translateZ(0)';\n      card.style.webkitTransform = 'translateZ(0)';\n      card.style.perspective = '1000px';\n      card.style.webkitPerspective = '1000px';\n    });\n\n    setupLenis();\n\n    updateCardTransforms();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (lenisRef.current) {\n        lenisRef.current.destroy();\n      }\n      stackCompletedRef.current = false;\n      cardsRef.current = [];\n      transformsCache.clear();\n      isUpdatingRef.current = false;\n    };\n  }, [\n    itemDistance,\n    itemScale,\n    itemStackDistance,\n    stackPosition,\n    scaleEndPosition,\n    baseScale,\n    scaleDuration,\n    rotationAmount,\n    blurAmount,\n    onStackComplete,\n    setupLenis,\n    updateCardTransforms,\n  ]);\n\n  return (\n    <div\n      className={`scroll-stack-scroller ${className}`.trim()}\n      ref={scrollerRef}\n    >\n      <div className=\"scroll-stack-inner\">\n        {children}\n        {/* Spacer so the last pin can release cleanly */}\n        <div className=\"scroll-stack-end\" />\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollStack;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}