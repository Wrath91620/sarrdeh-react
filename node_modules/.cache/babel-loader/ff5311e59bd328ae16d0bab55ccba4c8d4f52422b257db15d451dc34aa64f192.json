{"ast":null,"code":"import { Mesh } from '../../core/Mesh.js';\nimport { Program } from '../../core/Program.js';\nimport { Geometry } from '../../core/Geometry.js';\nimport { Vec3 } from '../../math/Vec3.js';\nimport { Mat3 } from '../../math/Mat3.js';\nexport class VertexNormalsHelper extends Mesh {\n  constructor(object, {\n    size = 0.1,\n    color = new Vec3(0.86, 0.16, 0.86),\n    ...meshProps\n  } = {}) {\n    const gl = object.gl;\n    const nNormals = object.geometry.attributes.normal.count;\n    const positionsArray = new Float32Array(nNormals * 2 * 3);\n    const normalsArray = new Float32Array(nNormals * 2 * 3);\n    const sizeArray = new Float32Array(nNormals * 2);\n    const normalData = object.geometry.attributes.normal.data;\n    const positionData = object.geometry.attributes.position.data;\n    const sizeData = new Float32Array([0, size]);\n    for (let i = 0; i < nNormals; i++) {\n      const i6 = i * 6;\n      const i3 = i * 3;\n\n      // duplicate position and normal for line start and end point\n      const pSub = positionData.subarray(i3, i3 + 3);\n      positionsArray.set(pSub, i6);\n      positionsArray.set(pSub, i6 + 3);\n      const nSub = normalData.subarray(i3, i3 + 3);\n      normalsArray.set(nSub, i6);\n      normalsArray.set(nSub, i6 + 3);\n      sizeArray.set(sizeData, i * 2);\n    }\n    const geometry = new Geometry(gl, {\n      position: {\n        size: 3,\n        data: positionsArray\n      },\n      normal: {\n        size: 3,\n        data: normalsArray\n      },\n      size: {\n        size: 1,\n        data: sizeArray\n      }\n    });\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        color: {\n          value: color\n        },\n        worldNormalMatrix: {\n          value: new Mat3()\n        },\n        objectWorldMatrix: {\n          value: object.worldMatrix\n        }\n      }\n    });\n    super(gl, {\n      ...meshProps,\n      mode: gl.LINES,\n      geometry,\n      program\n    });\n    this.object = object;\n  }\n  draw(arg) {\n    this.program.uniforms.worldNormalMatrix.value.getNormalMatrix(this.object.worldMatrix);\n    super.draw(arg);\n  }\n}\nconst vertex = /* glsl */`\nattribute vec3 position;\nattribute vec3 normal;\nattribute float size;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 objectWorldMatrix;\nuniform mat3 worldNormalMatrix;\n\nvoid main() {\n    vec3 n = normalize(worldNormalMatrix * normal) * size;\n    vec3 p = (objectWorldMatrix * vec4(position, 1.0)).xyz;\n    gl_Position = projectionMatrix * viewMatrix * vec4(p + n, 1.0);\n}\n`;\nconst fragment = /* glsl */`\nprecision highp float;\nuniform vec3 color;\n\nvoid main() {    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;","map":{"version":3,"names":["Mesh","Program","Geometry","Vec3","Mat3","VertexNormalsHelper","constructor","object","size","color","meshProps","gl","nNormals","geometry","attributes","normal","count","positionsArray","Float32Array","normalsArray","sizeArray","normalData","data","positionData","position","sizeData","i","i6","i3","pSub","subarray","set","nSub","program","vertex","fragment","uniforms","value","worldNormalMatrix","objectWorldMatrix","worldMatrix","mode","LINES","draw","arg","getNormalMatrix"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/node_modules/ogl/src/extras/helpers/VertexNormalsHelper.js"],"sourcesContent":["import { Mesh } from '../../core/Mesh.js';\r\nimport { Program } from '../../core/Program.js';\r\nimport { Geometry } from '../../core/Geometry.js';\r\nimport { Vec3 } from '../../math/Vec3.js';\r\nimport { Mat3 } from '../../math/Mat3.js';\r\n\r\nexport class VertexNormalsHelper extends Mesh {\r\n    constructor(object, { size = 0.1, color = new Vec3(0.86, 0.16, 0.86), ...meshProps } = {}) {\r\n        const gl = object.gl;\r\n        const nNormals = object.geometry.attributes.normal.count;\r\n        const positionsArray = new Float32Array(nNormals * 2 * 3);\r\n        const normalsArray = new Float32Array(nNormals * 2 * 3);\r\n        const sizeArray = new Float32Array(nNormals * 2);\r\n\r\n        const normalData = object.geometry.attributes.normal.data;\r\n        const positionData = object.geometry.attributes.position.data;\r\n        const sizeData = new Float32Array([0, size]);\r\n\r\n        for (let i = 0; i < nNormals; i++) {\r\n            const i6 = i * 6;\r\n            const i3 = i * 3;\r\n\r\n            // duplicate position and normal for line start and end point\r\n            const pSub = positionData.subarray(i3, i3 + 3);\r\n            positionsArray.set(pSub, i6);\r\n            positionsArray.set(pSub, i6 + 3);\r\n\r\n            const nSub = normalData.subarray(i3, i3 + 3);\r\n            normalsArray.set(nSub, i6);\r\n            normalsArray.set(nSub, i6 + 3);\r\n\r\n            sizeArray.set(sizeData, i * 2);\r\n        }\r\n\r\n        const geometry = new Geometry(gl, {\r\n            position: { size: 3, data: positionsArray },\r\n            normal: { size: 3, data: normalsArray },\r\n            size: { size: 1, data: sizeArray },\r\n        });\r\n\r\n        const program = new Program(gl, {\r\n            vertex,\r\n            fragment,\r\n            uniforms: {\r\n                color: { value: color },\r\n                worldNormalMatrix: { value: new Mat3() },\r\n                objectWorldMatrix: { value: object.worldMatrix },\r\n            },\r\n        });\r\n\r\n        super(gl, { ...meshProps, mode: gl.LINES, geometry, program });\r\n\r\n        this.object = object;\r\n    }\r\n\r\n    draw(arg) {\r\n        this.program.uniforms.worldNormalMatrix.value.getNormalMatrix(this.object.worldMatrix);\r\n        super.draw(arg);\r\n    }\r\n}\r\n\r\nconst vertex = /* glsl */ `\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute float size;\r\n\r\nuniform mat4 viewMatrix;\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 objectWorldMatrix;\r\nuniform mat3 worldNormalMatrix;\r\n\r\nvoid main() {\r\n    vec3 n = normalize(worldNormalMatrix * normal) * size;\r\n    vec3 p = (objectWorldMatrix * vec4(position, 1.0)).xyz;\r\n    gl_Position = projectionMatrix * viewMatrix * vec4(p + n, 1.0);\r\n}\r\n`;\r\n\r\nconst fragment = /* glsl */ `\r\nprecision highp float;\r\nuniform vec3 color;\r\n\r\nvoid main() {    \r\n    gl_FragColor = vec4(color, 1.0);\r\n}\r\n`;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}