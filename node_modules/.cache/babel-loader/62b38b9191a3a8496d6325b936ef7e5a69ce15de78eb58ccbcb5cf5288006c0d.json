{"ast":null,"code":"const EPSILON = 0.000001;\n\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\nexport function cross(out, a, b) {\n  let ax = a[0],\n    ay = a[1],\n    az = a[2];\n  let bx = b[0],\n    by = b[1],\n    bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\r\n * Performs a frame rate independant, linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\r\n * @param {Number} dt delta time\r\n * @returns {vec3} out\r\n */\nexport function smoothLerp(out, a, b, decay, dt) {\n  const exp = Math.exp(-decay * dt);\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = b[0] + (ax - b[0]) * exp;\n  out[1] = b[1] + (ay - b[1]) * exp;\n  out[2] = b[2] + (az - b[2]) * exp;\n  return out;\n}\n\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\r\n * Same as above but doesn't apply translation.\r\n * Useful for rays.\r\n */\nexport function scaleRotateMat4(out, a, m) {\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\n\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3];\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  let w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\nexport const angle = function () {\n  const tempA = [0, 0, 0];\n  const tempB = [0, 0, 0];\n  return function (a, b) {\n    copy(tempA, a);\n    copy(tempB, b);\n    normalize(tempA, tempA);\n    normalize(tempB, tempB);\n    let cosine = dot(tempA, tempB);\n    if (cosine > 1.0) {\n      return 0;\n    } else if (cosine < -1.0) {\n      return Math.PI;\n    } else {\n      return Math.acos(cosine);\n    }\n  };\n}();\n\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}","map":{"version":3,"names":["EPSILON","length","a","x","y","z","Math","sqrt","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","smoothLerp","decay","dt","exp","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","PI","acos","exactEquals"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/node_modules/ogl/src/math/functions/Vec3Func.js"],"sourcesContent":["const EPSILON = 0.000001;\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let len = x * x + y * y + z * z;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a frame rate independant, linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\r\n * @param {Number} dt delta time\r\n * @returns {vec3} out\r\n */\r\nexport function smoothLerp(out, a, b, decay, dt) {\r\n    const exp = Math.exp(-decay * dt);\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n\r\n    out[0] = b[0] + (ax - b[0]) * exp;\r\n    out[1] = b[1] + (ay - b[1]) * exp;\r\n    out[2] = b[2] + (az - b[2]) * exp;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Same as above but doesn't apply translation.\r\n * Useful for rays.\r\n */\r\nexport function scaleRotateMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    out[1] = x * m[1] + y * m[4] + z * m[7];\r\n    out[2] = x * m[2] + y * m[5] + z * m[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let qx = q[0],\r\n        qy = q[1],\r\n        qz = q[2],\r\n        qw = q[3];\r\n\r\n    let uvx = qy * z - qz * y;\r\n    let uvy = qz * x - qx * z;\r\n    let uvz = qx * y - qy * x;\r\n\r\n    let uuvx = qy * uvz - qz * uvy;\r\n    let uuvy = qz * uvx - qx * uvz;\r\n    let uuvz = qx * uvy - qy * uvx;\r\n\r\n    let w2 = qw * 2;\r\n    uvx *= w2;\r\n    uvy *= w2;\r\n    uvz *= w2;\r\n\r\n    uuvx *= 2;\r\n    uuvy *= 2;\r\n    uuvz *= 2;\r\n\r\n    out[0] = x + uvx + uuvx;\r\n    out[1] = y + uvy + uuvy;\r\n    out[2] = z + uvz + uuvz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport const angle = (function () {\r\n    const tempA = [0, 0, 0];\r\n    const tempB = [0, 0, 0];\r\n\r\n    return function (a, b) {\r\n        copy(tempA, a);\r\n        copy(tempB, b);\r\n\r\n        normalize(tempA, tempA);\r\n        normalize(tempB, tempB);\r\n\r\n        let cosine = dot(tempA, tempB);\r\n\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        } else if (cosine < -1.0) {\r\n            return Math.PI;\r\n        } else {\r\n            return Math.acos(cosine);\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,QAAQ;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,CAAC,EAAE;EACtB,IAAIC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZ,OAAOI,IAAI,CAACC,IAAI,CAACJ,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,IAAIA,CAACC,GAAG,EAAEP,CAAC,EAAE;EACzBO,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC;EACbO,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC;EACbO,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC;EACb,OAAOO,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACD,GAAG,EAAEN,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC9BI,GAAG,CAAC,CAAC,CAAC,GAAGN,CAAC;EACVM,GAAG,CAAC,CAAC,CAAC,GAAGL,CAAC;EACVK,GAAG,CAAC,CAAC,CAAC,GAAGJ,CAAC;EACV,OAAOI,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,GAAGA,CAACF,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAE;EAC3BH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOH,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,QAAQA,CAACJ,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAE;EAChCH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOH,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,QAAQA,CAACL,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAE;EAChCH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOH,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,MAAMA,CAACN,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAE;EAC9BH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOH,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,KAAKA,CAACP,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAE;EAC7BH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC;EACjBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC;EACjBH,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC;EACjB,OAAOH,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,QAAQA,CAACf,CAAC,EAAEU,CAAC,EAAE;EAC3B,IAAIT,CAAC,GAAGS,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;EACnB,IAAIE,CAAC,GAAGQ,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;EACnB,IAAIG,CAAC,GAAGO,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;EACnB,OAAOI,IAAI,CAACC,IAAI,CAACJ,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,eAAeA,CAAChB,CAAC,EAAEU,CAAC,EAAE;EAClC,IAAIT,CAAC,GAAGS,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;EACnB,IAAIE,CAAC,GAAGQ,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;EACnB,IAAIG,CAAC,GAAGO,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC;EACnB,OAAOC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,aAAaA,CAACjB,CAAC,EAAE;EAC7B,IAAIC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZ,OAAOC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,MAAMA,CAACX,GAAG,EAAEP,CAAC,EAAE;EAC3BO,GAAG,CAAC,CAAC,CAAC,GAAG,CAACP,CAAC,CAAC,CAAC,CAAC;EACdO,GAAG,CAAC,CAAC,CAAC,GAAG,CAACP,CAAC,CAAC,CAAC,CAAC;EACdO,GAAG,CAAC,CAAC,CAAC,GAAG,CAACP,CAAC,CAAC,CAAC,CAAC;EACd,OAAOO,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,OAAOA,CAACZ,GAAG,EAAEP,CAAC,EAAE;EAC5BO,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;EACnBO,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;EACnBO,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;EACnB,OAAOO,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,SAASA,CAACb,GAAG,EAAEP,CAAC,EAAE;EAC9B,IAAIC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIqB,GAAG,GAAGpB,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC;EAC/B,IAAIkB,GAAG,GAAG,CAAC,EAAE;IACT;IACAA,GAAG,GAAG,CAAC,GAAGjB,IAAI,CAACC,IAAI,CAACgB,GAAG,CAAC;EAC5B;EACAd,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGqB,GAAG;EACnBd,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGqB,GAAG;EACnBd,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,CAAC,GAAGqB,GAAG;EACnB,OAAOd,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,GAAGA,CAACtB,CAAC,EAAEU,CAAC,EAAE;EACtB,OAAOV,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC,GAAGV,CAAC,CAAC,CAAC,CAAC,GAAGU,CAAC,CAAC,CAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,KAAKA,CAAChB,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAE;EAC7B,IAAIc,EAAE,GAAGxB,CAAC,CAAC,CAAC,CAAC;IACTyB,EAAE,GAAGzB,CAAC,CAAC,CAAC,CAAC;IACT0B,EAAE,GAAG1B,CAAC,CAAC,CAAC,CAAC;EACb,IAAI2B,EAAE,GAAGjB,CAAC,CAAC,CAAC,CAAC;IACTkB,EAAE,GAAGlB,CAAC,CAAC,CAAC,CAAC;IACTmB,EAAE,GAAGnB,CAAC,CAAC,CAAC,CAAC;EAEbH,GAAG,CAAC,CAAC,CAAC,GAAGkB,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGE,EAAE;EAC1BrB,GAAG,CAAC,CAAC,CAAC,GAAGmB,EAAE,GAAGC,EAAE,GAAGH,EAAE,GAAGK,EAAE;EAC1BtB,GAAG,CAAC,CAAC,CAAC,GAAGiB,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGE,EAAE;EAC1B,OAAOpB,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,IAAIA,CAACvB,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAEqB,CAAC,EAAE;EAC/B,IAAIP,EAAE,GAAGxB,CAAC,CAAC,CAAC,CAAC;EACb,IAAIyB,EAAE,GAAGzB,CAAC,CAAC,CAAC,CAAC;EACb,IAAI0B,EAAE,GAAG1B,CAAC,CAAC,CAAC,CAAC;EACbO,GAAG,CAAC,CAAC,CAAC,GAAGiB,EAAE,GAAGO,CAAC,IAAIrB,CAAC,CAAC,CAAC,CAAC,GAAGc,EAAE,CAAC;EAC7BjB,GAAG,CAAC,CAAC,CAAC,GAAGkB,EAAE,GAAGM,CAAC,IAAIrB,CAAC,CAAC,CAAC,CAAC,GAAGe,EAAE,CAAC;EAC7BlB,GAAG,CAAC,CAAC,CAAC,GAAGmB,EAAE,GAAGK,CAAC,IAAIrB,CAAC,CAAC,CAAC,CAAC,GAAGgB,EAAE,CAAC;EAC7B,OAAOnB,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASyB,UAAUA,CAACzB,GAAG,EAAEP,CAAC,EAAEU,CAAC,EAAEuB,KAAK,EAAEC,EAAE,EAAE;EAC7C,MAAMC,GAAG,GAAG/B,IAAI,CAAC+B,GAAG,CAAC,CAACF,KAAK,GAAGC,EAAE,CAAC;EACjC,IAAIV,EAAE,GAAGxB,CAAC,CAAC,CAAC,CAAC;EACb,IAAIyB,EAAE,GAAGzB,CAAC,CAAC,CAAC,CAAC;EACb,IAAI0B,EAAE,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAEbO,GAAG,CAAC,CAAC,CAAC,GAAGG,CAAC,CAAC,CAAC,CAAC,GAAG,CAACc,EAAE,GAAGd,CAAC,CAAC,CAAC,CAAC,IAAIyB,GAAG;EACjC5B,GAAG,CAAC,CAAC,CAAC,GAAGG,CAAC,CAAC,CAAC,CAAC,GAAG,CAACe,EAAE,GAAGf,CAAC,CAAC,CAAC,CAAC,IAAIyB,GAAG;EACjC5B,GAAG,CAAC,CAAC,CAAC,GAAGG,CAAC,CAAC,CAAC,CAAC,GAAG,CAACgB,EAAE,GAAGhB,CAAC,CAAC,CAAC,CAAC,IAAIyB,GAAG;EACjC,OAAO5B,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS6B,aAAaA,CAAC7B,GAAG,EAAEP,CAAC,EAAEqC,CAAC,EAAE;EACrC,IAAIpC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IACRE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;IACRG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIsC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,EAAE,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,EAAE,CAAC;EAC/CC,CAAC,GAAGA,CAAC,IAAI,GAAG;EACZ/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,EAAE,CAAC,IAAIC,CAAC;EACrD/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,EAAE,CAAC,IAAIC,CAAC;EACrD/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,EAAE,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,EAAE,CAAC,IAAIC,CAAC;EACtD,OAAO/B,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASgC,eAAeA,CAAChC,GAAG,EAAEP,CAAC,EAAEqC,CAAC,EAAE;EACvC,IAAIpC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IACRE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;IACRG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIsC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,EAAE,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,EAAE,CAAC;EAC/CC,CAAC,GAAGA,CAAC,IAAI,GAAG;EACZ/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,IAAImC,CAAC;EAC7C/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,IAAImC,CAAC;EAC7C/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC,CAAC,CAAC,CAAC,GAAGpC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,EAAE,CAAC,GAAGlC,CAAC,IAAImC,CAAC;EAC9C,OAAO/B,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiC,aAAaA,CAACjC,GAAG,EAAEP,CAAC,EAAEqC,CAAC,EAAE;EACrC,IAAIpC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IACRE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;IACRG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZO,GAAG,CAAC,CAAC,CAAC,GAAGN,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,CAAC,CAAC;EACvC9B,GAAG,CAAC,CAAC,CAAC,GAAGN,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,CAAC,CAAC;EACvC9B,GAAG,CAAC,CAAC,CAAC,GAAGN,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC,GAAGnC,CAAC,GAAGmC,CAAC,CAAC,CAAC,CAAC,GAAGlC,CAAC,GAAGkC,CAAC,CAAC,CAAC,CAAC;EACvC,OAAO9B,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkC,aAAaA,CAAClC,GAAG,EAAEP,CAAC,EAAE0C,CAAC,EAAE;EACrC;;EAEA,IAAIzC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IACRE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;IACRG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACZ,IAAI2C,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;IACTE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;IACTG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;IACTI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;EAEb,IAAIK,GAAG,GAAGH,EAAE,GAAGzC,CAAC,GAAG0C,EAAE,GAAG3C,CAAC;EACzB,IAAI8C,GAAG,GAAGH,EAAE,GAAG5C,CAAC,GAAG0C,EAAE,GAAGxC,CAAC;EACzB,IAAI8C,GAAG,GAAGN,EAAE,GAAGzC,CAAC,GAAG0C,EAAE,GAAG3C,CAAC;EAEzB,IAAIiD,IAAI,GAAGN,EAAE,GAAGK,GAAG,GAAGJ,EAAE,GAAGG,GAAG;EAC9B,IAAIG,IAAI,GAAGN,EAAE,GAAGE,GAAG,GAAGJ,EAAE,GAAGM,GAAG;EAC9B,IAAIG,IAAI,GAAGT,EAAE,GAAGK,GAAG,GAAGJ,EAAE,GAAGG,GAAG;EAE9B,IAAIM,EAAE,GAAGP,EAAE,GAAG,CAAC;EACfC,GAAG,IAAIM,EAAE;EACTL,GAAG,IAAIK,EAAE;EACTJ,GAAG,IAAII,EAAE;EAETH,IAAI,IAAI,CAAC;EACTC,IAAI,IAAI,CAAC;EACTC,IAAI,IAAI,CAAC;EAET7C,GAAG,CAAC,CAAC,CAAC,GAAGN,CAAC,GAAG8C,GAAG,GAAGG,IAAI;EACvB3C,GAAG,CAAC,CAAC,CAAC,GAAGL,CAAC,GAAG8C,GAAG,GAAGG,IAAI;EACvB5C,GAAG,CAAC,CAAC,CAAC,GAAGJ,CAAC,GAAG8C,GAAG,GAAGG,IAAI;EACvB,OAAO7C,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+C,KAAK,GAAI,YAAY;EAC9B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvB,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEvB,OAAO,UAAUxD,CAAC,EAAEU,CAAC,EAAE;IACnBJ,IAAI,CAACiD,KAAK,EAAEvD,CAAC,CAAC;IACdM,IAAI,CAACkD,KAAK,EAAE9C,CAAC,CAAC;IAEdU,SAAS,CAACmC,KAAK,EAAEA,KAAK,CAAC;IACvBnC,SAAS,CAACoC,KAAK,EAAEA,KAAK,CAAC;IAEvB,IAAIC,MAAM,GAAGnC,GAAG,CAACiC,KAAK,EAAEC,KAAK,CAAC;IAE9B,IAAIC,MAAM,GAAG,GAAG,EAAE;MACd,OAAO,CAAC;IACZ,CAAC,MAAM,IAAIA,MAAM,GAAG,CAAC,GAAG,EAAE;MACtB,OAAOrD,IAAI,CAACsD,EAAE;IAClB,CAAC,MAAM;MACH,OAAOtD,IAAI,CAACuD,IAAI,CAACF,MAAM,CAAC;IAC5B;EACJ,CAAC;AACL,CAAC,CAAE,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,WAAWA,CAAC5D,CAAC,EAAEU,CAAC,EAAE;EAC9B,OAAOV,CAAC,CAAC,CAAC,CAAC,KAAKU,CAAC,CAAC,CAAC,CAAC,IAAIV,CAAC,CAAC,CAAC,CAAC,KAAKU,CAAC,CAAC,CAAC,CAAC,IAAIV,CAAC,CAAC,CAAC,CAAC,KAAKU,CAAC,CAAC,CAAC,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}