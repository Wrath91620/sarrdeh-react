{"ast":null,"code":"import * as ColorFunc from './functions/ColorFunc.js';\n\n// Color stored as an array of RGB decimal values (between 0 > 1)\n// Constructor and set method accept following formats:\n// new Color() - Empty (defaults to black)\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\n// new Color('#ff0000') - Hex string\n// new Color('#ccc') - Short-hand Hex string\n// new Color(0x4f27e8) - Number\n// new Color('red') - Color name string (short list in ColorFunc.js)\n\nexport class Color extends Array {\n  constructor(color) {\n    if (Array.isArray(color)) return super(...color);\n    return super(...ColorFunc.parseColor(...arguments));\n  }\n  get r() {\n    return this[0];\n  }\n  get g() {\n    return this[1];\n  }\n  get b() {\n    return this[2];\n  }\n  set r(v) {\n    this[0] = v;\n  }\n  set g(v) {\n    this[1] = v;\n  }\n  set b(v) {\n    this[2] = v;\n  }\n  set(color) {\n    if (Array.isArray(color)) return this.copy(color);\n    return this.copy(ColorFunc.parseColor(...arguments));\n  }\n  copy(v) {\n    this[0] = v[0];\n    this[1] = v[1];\n    this[2] = v[2];\n    return this;\n  }\n}","map":{"version":3,"names":["ColorFunc","Color","Array","constructor","color","isArray","parseColor","arguments","r","g","b","v","set","copy"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/node_modules/ogl/src/math/Color.js"],"sourcesContent":["import * as ColorFunc from './functions/ColorFunc.js';\r\n\r\n// Color stored as an array of RGB decimal values (between 0 > 1)\r\n// Constructor and set method accept following formats:\r\n// new Color() - Empty (defaults to black)\r\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\r\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\r\n// new Color('#ff0000') - Hex string\r\n// new Color('#ccc') - Short-hand Hex string\r\n// new Color(0x4f27e8) - Number\r\n// new Color('red') - Color name string (short list in ColorFunc.js)\r\n\r\nexport class Color extends Array {\r\n    constructor(color) {\r\n        if (Array.isArray(color)) return super(...color);\r\n        return super(...ColorFunc.parseColor(...arguments));\r\n    }\r\n\r\n    get r() {\r\n        return this[0];\r\n    }\r\n\r\n    get g() {\r\n        return this[1];\r\n    }\r\n\r\n    get b() {\r\n        return this[2];\r\n    }\r\n\r\n    set r(v) {\r\n        this[0] = v;\r\n    }\r\n\r\n    set g(v) {\r\n        this[1] = v;\r\n    }\r\n\r\n    set b(v) {\r\n        this[2] = v;\r\n    }\r\n\r\n    set(color) {\r\n        if (Array.isArray(color)) return this.copy(color);\r\n        return this.copy(ColorFunc.parseColor(...arguments));\r\n    }\r\n\r\n    copy(v) {\r\n        this[0] = v[0];\r\n        this[1] = v[1];\r\n        this[2] = v[2];\r\n        return this;\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,KAAK,SAASC,KAAK,CAAC;EAC7BC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAIF,KAAK,CAACG,OAAO,CAACD,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC,GAAGA,KAAK,CAAC;IAChD,OAAO,KAAK,CAAC,GAAGJ,SAAS,CAACM,UAAU,CAAC,GAAGC,SAAS,CAAC,CAAC;EACvD;EAEA,IAAIC,CAACA,CAAA,EAAG;IACJ,OAAO,IAAI,CAAC,CAAC,CAAC;EAClB;EAEA,IAAIC,CAACA,CAAA,EAAG;IACJ,OAAO,IAAI,CAAC,CAAC,CAAC;EAClB;EAEA,IAAIC,CAACA,CAAA,EAAG;IACJ,OAAO,IAAI,CAAC,CAAC,CAAC;EAClB;EAEA,IAAIF,CAACA,CAACG,CAAC,EAAE;IACL,IAAI,CAAC,CAAC,CAAC,GAAGA,CAAC;EACf;EAEA,IAAIF,CAACA,CAACE,CAAC,EAAE;IACL,IAAI,CAAC,CAAC,CAAC,GAAGA,CAAC;EACf;EAEA,IAAID,CAACA,CAACC,CAAC,EAAE;IACL,IAAI,CAAC,CAAC,CAAC,GAAGA,CAAC;EACf;EAEAC,GAAGA,CAACR,KAAK,EAAE;IACP,IAAIF,KAAK,CAACG,OAAO,CAACD,KAAK,CAAC,EAAE,OAAO,IAAI,CAACS,IAAI,CAACT,KAAK,CAAC;IACjD,OAAO,IAAI,CAACS,IAAI,CAACb,SAAS,CAACM,UAAU,CAAC,GAAGC,SAAS,CAAC,CAAC;EACxD;EAEAM,IAAIA,CAACF,CAAC,EAAE;IACJ,IAAI,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;IACd,IAAI,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;IACd,IAAI,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;IACd,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}