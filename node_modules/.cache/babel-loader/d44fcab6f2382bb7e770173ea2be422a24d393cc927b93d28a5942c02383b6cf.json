{"ast":null,"code":"import { Texture } from '../core/Texture.js';\nimport { KTXTexture } from './KTXTexture.js';\n\n// For compressed textures, generate using https://github.com/TimvanScherpenzeel/texture-compressor\n\nlet cache = {};\nconst supportedExtensions = [];\nexport class TextureLoader {\n  static load(gl, {\n    src,\n    // string or object of extension:src key-values\n    // {\n    //     pvrtc: '...ktx',\n    //     s3tc: '...ktx',\n    //     etc: '...ktx',\n    //     etc1: '...ktx',\n    //     astc: '...ktx',\n    //     webp: '...webp',\n    //     jpg: '...jpg',\n    //     png: '...png',\n    // }\n\n    // Only props relevant to KTXTexture\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    anisotropy = 0,\n    // For regular images\n    format = gl.RGBA,\n    internalFormat = format,\n    generateMipmaps = true,\n    minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n    magFilter = gl.LINEAR,\n    premultiplyAlpha = false,\n    unpackAlignment = 4,\n    flipY = true\n  } = {}) {\n    const support = this.getSupportedExtensions(gl);\n    let ext = 'none';\n\n    // If src is string, determine which format from the extension\n    if (typeof src === 'string') {\n      ext = src.split('.').pop().split('?')[0].toLowerCase();\n    }\n\n    // If src is object, use supported extensions and provided list to choose best option\n    // Get first supported match, so put in order of preference\n    if (typeof src === 'object') {\n      for (const prop in src) {\n        if (support.includes(prop.toLowerCase())) {\n          ext = prop.toLowerCase();\n          src = src[prop];\n          break;\n        }\n      }\n    }\n\n    // Stringify props\n    const cacheID = src + wrapS + wrapT + anisotropy + format + internalFormat + generateMipmaps + minFilter + magFilter + premultiplyAlpha + unpackAlignment + flipY + gl.renderer.id;\n\n    // Check cache for existing texture\n    if (cache[cacheID]) return cache[cacheID];\n    let texture;\n    switch (ext) {\n      case 'ktx':\n      case 'pvrtc':\n      case 's3tc':\n      case 'etc':\n      case 'etc1':\n      case 'astc':\n        // Load compressed texture using KTX format\n        texture = new KTXTexture(gl, {\n          src,\n          wrapS,\n          wrapT,\n          anisotropy,\n          minFilter,\n          magFilter\n        });\n        texture.loaded = this.loadKTX(src, texture);\n        break;\n      case 'webp':\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n        texture = new Texture(gl, {\n          wrapS,\n          wrapT,\n          anisotropy,\n          format,\n          internalFormat,\n          generateMipmaps,\n          minFilter,\n          magFilter,\n          premultiplyAlpha,\n          unpackAlignment,\n          flipY\n        });\n        texture.loaded = this.loadImage(gl, src, texture, flipY);\n        break;\n      default:\n        console.warn('No supported format supplied');\n        texture = new Texture(gl);\n    }\n    texture.ext = ext;\n    cache[cacheID] = texture;\n    return texture;\n  }\n  static getSupportedExtensions(gl) {\n    if (supportedExtensions.length) return supportedExtensions;\n    const extensions = {\n      pvrtc: gl.renderer.getExtension('WEBGL_compressed_texture_pvrtc') || gl.renderer.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n      s3tc: gl.renderer.getExtension('WEBGL_compressed_texture_s3tc'),\n      // etc: gl.renderer.getExtension('WEBGL_compressed_texture_etc'),\n      etc1: gl.renderer.getExtension('WEBGL_compressed_texture_etc1'),\n      astc: gl.renderer.getExtension('WEBGL_compressed_texture_astc'),\n      bc7: gl.renderer.getExtension('EXT_texture_compression_bptc')\n    };\n    for (const ext in extensions) if (extensions[ext]) supportedExtensions.push(ext);\n\n    // Formats supported by all\n    supportedExtensions.push('png', 'jpg', 'webp');\n    return supportedExtensions;\n  }\n  static loadKTX(src, texture) {\n    return fetch(src).then(res => res.arrayBuffer()).then(buffer => texture.parseBuffer(buffer));\n  }\n  static loadImage(gl, src, texture, flipY) {\n    return decodeImage(src, flipY).then(imgBmp => {\n      // Catch non POT textures for WebGL1 and update params to avoid errors\n      if (!gl.renderer.isWebgl2 && (!powerOfTwo(imgBmp.width) || !powerOfTwo(imgBmp.height))) {\n        if (texture.generateMipmaps) texture.generateMipmaps = false;\n        if (texture.minFilter === gl.NEAREST_MIPMAP_LINEAR) texture.minFilter = gl.LINEAR;\n        if (texture.wrapS === gl.REPEAT) texture.wrapS = texture.wrapT = gl.CLAMP_TO_EDGE;\n      }\n      texture.image = imgBmp;\n\n      // For createImageBitmap, close once uploaded\n      texture.onUpdate = () => {\n        if (imgBmp.close) imgBmp.close();\n        texture.onUpdate = null;\n      };\n      return imgBmp;\n    });\n  }\n  static clearCache() {\n    cache = {};\n  }\n}\nfunction powerOfTwo(value) {\n  // (width & (width - 1)) !== 0\n  return Math.log2(value) % 1 === 0;\n}\nfunction decodeImage(src, flipY) {\n  return new Promise((resolve, reject) => {\n    if (isCreateImageBitmap()) {\n      fetch(src, {\n        mode: 'cors'\n      }).then(r => r.blob()).then(b => createImageBitmap(b, {\n        imageOrientation: flipY ? 'flipY' : 'none',\n        premultiplyAlpha: 'none'\n      })).then(resolve).catch(err => reject(err));\n    } else {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = src;\n      img.onerror = ({\n        type\n      }) => reject(`${type}: Loading image`);\n      img.onload = () => resolve(img);\n    }\n  });\n}\nfunction isCreateImageBitmap() {\n  const isChrome = navigator.userAgent.toLowerCase().includes('chrome');\n  if (!isChrome) return false;\n  try {\n    createImageBitmap;\n  } catch (e) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["Texture","KTXTexture","cache","supportedExtensions","TextureLoader","load","gl","src","wrapS","CLAMP_TO_EDGE","wrapT","anisotropy","format","RGBA","internalFormat","generateMipmaps","minFilter","NEAREST_MIPMAP_LINEAR","LINEAR","magFilter","premultiplyAlpha","unpackAlignment","flipY","support","getSupportedExtensions","ext","split","pop","toLowerCase","prop","includes","cacheID","renderer","id","texture","loaded","loadKTX","loadImage","console","warn","length","extensions","pvrtc","getExtension","s3tc","etc1","astc","bc7","push","fetch","then","res","arrayBuffer","buffer","parseBuffer","decodeImage","imgBmp","isWebgl2","powerOfTwo","width","height","REPEAT","image","onUpdate","close","clearCache","value","Math","log2","Promise","resolve","reject","isCreateImageBitmap","mode","r","blob","b","createImageBitmap","imageOrientation","catch","err","img","Image","crossOrigin","onerror","type","onload","isChrome","navigator","userAgent","e"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/node_modules/ogl/src/extras/TextureLoader.js"],"sourcesContent":["import { Texture } from '../core/Texture.js';\r\nimport { KTXTexture } from './KTXTexture.js';\r\n\r\n// For compressed textures, generate using https://github.com/TimvanScherpenzeel/texture-compressor\r\n\r\nlet cache = {};\r\nconst supportedExtensions = [];\r\n\r\nexport class TextureLoader {\r\n    static load(\r\n        gl,\r\n        {\r\n            src, // string or object of extension:src key-values\r\n            // {\r\n            //     pvrtc: '...ktx',\r\n            //     s3tc: '...ktx',\r\n            //     etc: '...ktx',\r\n            //     etc1: '...ktx',\r\n            //     astc: '...ktx',\r\n            //     webp: '...webp',\r\n            //     jpg: '...jpg',\r\n            //     png: '...png',\r\n            // }\r\n\r\n            // Only props relevant to KTXTexture\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            anisotropy = 0,\r\n\r\n            // For regular images\r\n            format = gl.RGBA,\r\n            internalFormat = format,\r\n            generateMipmaps = true,\r\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            premultiplyAlpha = false,\r\n            unpackAlignment = 4,\r\n            flipY = true,\r\n        } = {}\r\n    ) {\r\n        const support = this.getSupportedExtensions(gl);\r\n        let ext = 'none';\r\n\r\n        // If src is string, determine which format from the extension\r\n        if (typeof src === 'string') {\r\n            ext = src.split('.').pop().split('?')[0].toLowerCase();\r\n        }\r\n\r\n        // If src is object, use supported extensions and provided list to choose best option\r\n        // Get first supported match, so put in order of preference\r\n        if (typeof src === 'object') {\r\n            for (const prop in src) {\r\n                if (support.includes(prop.toLowerCase())) {\r\n                    ext = prop.toLowerCase();\r\n                    src = src[prop];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Stringify props\r\n        const cacheID = src + wrapS + wrapT + anisotropy + format + internalFormat + generateMipmaps + minFilter + magFilter + premultiplyAlpha + unpackAlignment + flipY + gl.renderer.id;\r\n\r\n        // Check cache for existing texture\r\n        if (cache[cacheID]) return cache[cacheID];\r\n\r\n        let texture;\r\n        switch (ext) {\r\n            case 'ktx':\r\n            case 'pvrtc':\r\n            case 's3tc':\r\n            case 'etc':\r\n            case 'etc1':\r\n            case 'astc':\r\n                // Load compressed texture using KTX format\r\n                texture = new KTXTexture(gl, {\r\n                    src,\r\n                    wrapS,\r\n                    wrapT,\r\n                    anisotropy,\r\n                    minFilter,\r\n                    magFilter,\r\n                });\r\n                texture.loaded = this.loadKTX(src, texture);\r\n                break;\r\n            case 'webp':\r\n            case 'jpg':\r\n            case 'jpeg':\r\n            case 'png':\r\n                texture = new Texture(gl, {\r\n                    wrapS,\r\n                    wrapT,\r\n                    anisotropy,\r\n                    format,\r\n                    internalFormat,\r\n                    generateMipmaps,\r\n                    minFilter,\r\n                    magFilter,\r\n                    premultiplyAlpha,\r\n                    unpackAlignment,\r\n                    flipY,\r\n                });\r\n                texture.loaded = this.loadImage(gl, src, texture, flipY);\r\n                break;\r\n            default:\r\n                console.warn('No supported format supplied');\r\n                texture = new Texture(gl);\r\n        }\r\n\r\n        texture.ext = ext;\r\n        cache[cacheID] = texture;\r\n        return texture;\r\n    }\r\n\r\n    static getSupportedExtensions(gl) {\r\n        if (supportedExtensions.length) return supportedExtensions;\r\n\r\n        const extensions = {\r\n            pvrtc: gl.renderer.getExtension('WEBGL_compressed_texture_pvrtc') || gl.renderer.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\r\n            s3tc: gl.renderer.getExtension('WEBGL_compressed_texture_s3tc'),\r\n            // etc: gl.renderer.getExtension('WEBGL_compressed_texture_etc'),\r\n            etc1: gl.renderer.getExtension('WEBGL_compressed_texture_etc1'),\r\n            astc: gl.renderer.getExtension('WEBGL_compressed_texture_astc'),\r\n            bc7: gl.renderer.getExtension('EXT_texture_compression_bptc'),\r\n        };\r\n\r\n        for (const ext in extensions) if (extensions[ext]) supportedExtensions.push(ext);\r\n\r\n        // Formats supported by all\r\n        supportedExtensions.push('png', 'jpg', 'webp');\r\n\r\n        return supportedExtensions;\r\n    }\r\n\r\n    static loadKTX(src, texture) {\r\n        return fetch(src)\r\n            .then((res) => res.arrayBuffer())\r\n            .then((buffer) => texture.parseBuffer(buffer));\r\n    }\r\n\r\n    static loadImage(gl, src, texture, flipY) {\r\n        return decodeImage(src, flipY).then((imgBmp) => {\r\n            // Catch non POT textures for WebGL1 and update params to avoid errors\r\n            if (!gl.renderer.isWebgl2 && (!powerOfTwo(imgBmp.width) || !powerOfTwo(imgBmp.height))) {\r\n                if (texture.generateMipmaps) texture.generateMipmaps = false;\r\n                if (texture.minFilter === gl.NEAREST_MIPMAP_LINEAR) texture.minFilter = gl.LINEAR;\r\n                if (texture.wrapS === gl.REPEAT) texture.wrapS = texture.wrapT = gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            texture.image = imgBmp;\r\n\r\n            // For createImageBitmap, close once uploaded\r\n            texture.onUpdate = () => {\r\n                if (imgBmp.close) imgBmp.close();\r\n                texture.onUpdate = null;\r\n            };\r\n\r\n            return imgBmp;\r\n        });\r\n    }\r\n\r\n    static clearCache() {\r\n        cache = {};\r\n    }\r\n}\r\n\r\nfunction powerOfTwo(value) {\r\n    // (width & (width - 1)) !== 0\r\n    return Math.log2(value) % 1 === 0;\r\n}\r\n\r\nfunction decodeImage(src, flipY) {\r\n    return new Promise((resolve, reject) => {\r\n        if (isCreateImageBitmap()) {\r\n            fetch(src, { mode: 'cors' })\r\n                .then((r) => r.blob())\r\n                .then((b) => createImageBitmap(b, { imageOrientation: flipY ? 'flipY' : 'none', premultiplyAlpha: 'none' }))\r\n                .then(resolve)\r\n                .catch((err) => reject(err));\r\n        } else {\r\n            const img = new Image();\r\n\r\n            img.crossOrigin = '';\r\n            img.src = src;\r\n            img.onerror = ({ type }) => reject(`${type}: Loading image`);\r\n            img.onload = () => resolve(img);\r\n        }\r\n    });\r\n}\r\n\r\nfunction isCreateImageBitmap() {\r\n    const isChrome = navigator.userAgent.toLowerCase().includes('chrome');\r\n    if (!isChrome) return false;\r\n    try {\r\n        createImageBitmap;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,UAAU,QAAQ,iBAAiB;;AAE5C;;AAEA,IAAIC,KAAK,GAAG,CAAC,CAAC;AACd,MAAMC,mBAAmB,GAAG,EAAE;AAE9B,OAAO,MAAMC,aAAa,CAAC;EACvB,OAAOC,IAAIA,CACPC,EAAE,EACF;IACIC,GAAG;IAAE;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACAC,KAAK,GAAGF,EAAE,CAACG,aAAa;IACxBC,KAAK,GAAGJ,EAAE,CAACG,aAAa;IACxBE,UAAU,GAAG,CAAC;IAEd;IACAC,MAAM,GAAGN,EAAE,CAACO,IAAI;IAChBC,cAAc,GAAGF,MAAM;IACvBG,eAAe,GAAG,IAAI;IACtBC,SAAS,GAAGD,eAAe,GAAGT,EAAE,CAACW,qBAAqB,GAAGX,EAAE,CAACY,MAAM;IAClEC,SAAS,GAAGb,EAAE,CAACY,MAAM;IACrBE,gBAAgB,GAAG,KAAK;IACxBC,eAAe,GAAG,CAAC;IACnBC,KAAK,GAAG;EACZ,CAAC,GAAG,CAAC,CAAC,EACR;IACE,MAAMC,OAAO,GAAG,IAAI,CAACC,sBAAsB,CAAClB,EAAE,CAAC;IAC/C,IAAImB,GAAG,GAAG,MAAM;;IAEhB;IACA,IAAI,OAAOlB,GAAG,KAAK,QAAQ,EAAE;MACzBkB,GAAG,GAAGlB,GAAG,CAACmB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;IAC1D;;IAEA;IACA;IACA,IAAI,OAAOrB,GAAG,KAAK,QAAQ,EAAE;MACzB,KAAK,MAAMsB,IAAI,IAAItB,GAAG,EAAE;QACpB,IAAIgB,OAAO,CAACO,QAAQ,CAACD,IAAI,CAACD,WAAW,CAAC,CAAC,CAAC,EAAE;UACtCH,GAAG,GAAGI,IAAI,CAACD,WAAW,CAAC,CAAC;UACxBrB,GAAG,GAAGA,GAAG,CAACsB,IAAI,CAAC;UACf;QACJ;MACJ;IACJ;;IAEA;IACA,MAAME,OAAO,GAAGxB,GAAG,GAAGC,KAAK,GAAGE,KAAK,GAAGC,UAAU,GAAGC,MAAM,GAAGE,cAAc,GAAGC,eAAe,GAAGC,SAAS,GAAGG,SAAS,GAAGC,gBAAgB,GAAGC,eAAe,GAAGC,KAAK,GAAGhB,EAAE,CAAC0B,QAAQ,CAACC,EAAE;;IAElL;IACA,IAAI/B,KAAK,CAAC6B,OAAO,CAAC,EAAE,OAAO7B,KAAK,CAAC6B,OAAO,CAAC;IAEzC,IAAIG,OAAO;IACX,QAAQT,GAAG;MACP,KAAK,KAAK;MACV,KAAK,OAAO;MACZ,KAAK,MAAM;MACX,KAAK,KAAK;MACV,KAAK,MAAM;MACX,KAAK,MAAM;QACP;QACAS,OAAO,GAAG,IAAIjC,UAAU,CAACK,EAAE,EAAE;UACzBC,GAAG;UACHC,KAAK;UACLE,KAAK;UACLC,UAAU;UACVK,SAAS;UACTG;QACJ,CAAC,CAAC;QACFe,OAAO,CAACC,MAAM,GAAG,IAAI,CAACC,OAAO,CAAC7B,GAAG,EAAE2B,OAAO,CAAC;QAC3C;MACJ,KAAK,MAAM;MACX,KAAK,KAAK;MACV,KAAK,MAAM;MACX,KAAK,KAAK;QACNA,OAAO,GAAG,IAAIlC,OAAO,CAACM,EAAE,EAAE;UACtBE,KAAK;UACLE,KAAK;UACLC,UAAU;UACVC,MAAM;UACNE,cAAc;UACdC,eAAe;UACfC,SAAS;UACTG,SAAS;UACTC,gBAAgB;UAChBC,eAAe;UACfC;QACJ,CAAC,CAAC;QACFY,OAAO,CAACC,MAAM,GAAG,IAAI,CAACE,SAAS,CAAC/B,EAAE,EAAEC,GAAG,EAAE2B,OAAO,EAAEZ,KAAK,CAAC;QACxD;MACJ;QACIgB,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;QAC5CL,OAAO,GAAG,IAAIlC,OAAO,CAACM,EAAE,CAAC;IACjC;IAEA4B,OAAO,CAACT,GAAG,GAAGA,GAAG;IACjBvB,KAAK,CAAC6B,OAAO,CAAC,GAAGG,OAAO;IACxB,OAAOA,OAAO;EAClB;EAEA,OAAOV,sBAAsBA,CAAClB,EAAE,EAAE;IAC9B,IAAIH,mBAAmB,CAACqC,MAAM,EAAE,OAAOrC,mBAAmB;IAE1D,MAAMsC,UAAU,GAAG;MACfC,KAAK,EAAEpC,EAAE,CAAC0B,QAAQ,CAACW,YAAY,CAAC,gCAAgC,CAAC,IAAIrC,EAAE,CAAC0B,QAAQ,CAACW,YAAY,CAAC,uCAAuC,CAAC;MACtIC,IAAI,EAAEtC,EAAE,CAAC0B,QAAQ,CAACW,YAAY,CAAC,+BAA+B,CAAC;MAC/D;MACAE,IAAI,EAAEvC,EAAE,CAAC0B,QAAQ,CAACW,YAAY,CAAC,+BAA+B,CAAC;MAC/DG,IAAI,EAAExC,EAAE,CAAC0B,QAAQ,CAACW,YAAY,CAAC,+BAA+B,CAAC;MAC/DI,GAAG,EAAEzC,EAAE,CAAC0B,QAAQ,CAACW,YAAY,CAAC,8BAA8B;IAChE,CAAC;IAED,KAAK,MAAMlB,GAAG,IAAIgB,UAAU,EAAE,IAAIA,UAAU,CAAChB,GAAG,CAAC,EAAEtB,mBAAmB,CAAC6C,IAAI,CAACvB,GAAG,CAAC;;IAEhF;IACAtB,mBAAmB,CAAC6C,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;IAE9C,OAAO7C,mBAAmB;EAC9B;EAEA,OAAOiC,OAAOA,CAAC7B,GAAG,EAAE2B,OAAO,EAAE;IACzB,OAAOe,KAAK,CAAC1C,GAAG,CAAC,CACZ2C,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAChCF,IAAI,CAAEG,MAAM,IAAKnB,OAAO,CAACoB,WAAW,CAACD,MAAM,CAAC,CAAC;EACtD;EAEA,OAAOhB,SAASA,CAAC/B,EAAE,EAAEC,GAAG,EAAE2B,OAAO,EAAEZ,KAAK,EAAE;IACtC,OAAOiC,WAAW,CAAChD,GAAG,EAAEe,KAAK,CAAC,CAAC4B,IAAI,CAAEM,MAAM,IAAK;MAC5C;MACA,IAAI,CAAClD,EAAE,CAAC0B,QAAQ,CAACyB,QAAQ,KAAK,CAACC,UAAU,CAACF,MAAM,CAACG,KAAK,CAAC,IAAI,CAACD,UAAU,CAACF,MAAM,CAACI,MAAM,CAAC,CAAC,EAAE;QACpF,IAAI1B,OAAO,CAACnB,eAAe,EAAEmB,OAAO,CAACnB,eAAe,GAAG,KAAK;QAC5D,IAAImB,OAAO,CAAClB,SAAS,KAAKV,EAAE,CAACW,qBAAqB,EAAEiB,OAAO,CAAClB,SAAS,GAAGV,EAAE,CAACY,MAAM;QACjF,IAAIgB,OAAO,CAAC1B,KAAK,KAAKF,EAAE,CAACuD,MAAM,EAAE3B,OAAO,CAAC1B,KAAK,GAAG0B,OAAO,CAACxB,KAAK,GAAGJ,EAAE,CAACG,aAAa;MACrF;MAEAyB,OAAO,CAAC4B,KAAK,GAAGN,MAAM;;MAEtB;MACAtB,OAAO,CAAC6B,QAAQ,GAAG,MAAM;QACrB,IAAIP,MAAM,CAACQ,KAAK,EAAER,MAAM,CAACQ,KAAK,CAAC,CAAC;QAChC9B,OAAO,CAAC6B,QAAQ,GAAG,IAAI;MAC3B,CAAC;MAED,OAAOP,MAAM;IACjB,CAAC,CAAC;EACN;EAEA,OAAOS,UAAUA,CAAA,EAAG;IAChB/D,KAAK,GAAG,CAAC,CAAC;EACd;AACJ;AAEA,SAASwD,UAAUA,CAACQ,KAAK,EAAE;EACvB;EACA,OAAOC,IAAI,CAACC,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC;AACrC;AAEA,SAASX,WAAWA,CAAChD,GAAG,EAAEe,KAAK,EAAE;EAC7B,OAAO,IAAI+C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIC,mBAAmB,CAAC,CAAC,EAAE;MACvBvB,KAAK,CAAC1C,GAAG,EAAE;QAAEkE,IAAI,EAAE;MAAO,CAAC,CAAC,CACvBvB,IAAI,CAAEwB,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACrBzB,IAAI,CAAE0B,CAAC,IAAKC,iBAAiB,CAACD,CAAC,EAAE;QAAEE,gBAAgB,EAAExD,KAAK,GAAG,OAAO,GAAG,MAAM;QAAEF,gBAAgB,EAAE;MAAO,CAAC,CAAC,CAAC,CAC3G8B,IAAI,CAACoB,OAAO,CAAC,CACbS,KAAK,CAAEC,GAAG,IAAKT,MAAM,CAACS,GAAG,CAAC,CAAC;IACpC,CAAC,MAAM;MACH,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MAEvBD,GAAG,CAACE,WAAW,GAAG,EAAE;MACpBF,GAAG,CAAC1E,GAAG,GAAGA,GAAG;MACb0E,GAAG,CAACG,OAAO,GAAG,CAAC;QAAEC;MAAK,CAAC,KAAKd,MAAM,CAAC,GAAGc,IAAI,iBAAiB,CAAC;MAC5DJ,GAAG,CAACK,MAAM,GAAG,MAAMhB,OAAO,CAACW,GAAG,CAAC;IACnC;EACJ,CAAC,CAAC;AACN;AAEA,SAAST,mBAAmBA,CAAA,EAAG;EAC3B,MAAMe,QAAQ,GAAGC,SAAS,CAACC,SAAS,CAAC7D,WAAW,CAAC,CAAC,CAACE,QAAQ,CAAC,QAAQ,CAAC;EACrE,IAAI,CAACyD,QAAQ,EAAE,OAAO,KAAK;EAC3B,IAAI;IACAV,iBAAiB;EACrB,CAAC,CAAC,OAAOa,CAAC,EAAE;IACR,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}