{"ast":null,"code":"const EPSILON = 0.000001;\n\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec4} out\r\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}","map":{"version":3,"names":["EPSILON","copy","out","a","set","x","y","z","w","add","b","scale","length","Math","sqrt","normalize","len","dot","lerp","t","ax","ay","az","aw"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/node_modules/ogl/src/math/functions/Vec4Func.js"],"sourcesContent":["const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let w = a[3];\r\n    return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let w = a[3];\r\n    let len = x * x + y * y + z * z + w * w;\r\n    if (len > 0) {\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    let aw = a[3];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    out[3] = aw + t * (b[3] - aw);\r\n    return out;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}