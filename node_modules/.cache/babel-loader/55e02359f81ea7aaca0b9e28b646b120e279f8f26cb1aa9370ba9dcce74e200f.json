{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarrdeh Tech\\\\Desktop\\\\Sarrdeh-React\\\\sarrdeh-react\\\\src\\\\components\\\\Backgrounds\\\\Threads\\\\Threads.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { Renderer, Program, Mesh, Triangle, Color } from \"ogl\";\nimport \"./Threads.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexShader = `\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\nconst fragmentShader = `\nprecision highp float;\n\nuniform float iTime;\nuniform vec3 iResolution;\nuniform vec3 uColor;\nuniform float uAmplitude;\nuniform float uDistance;\nuniform vec2 uMouse;\n\n#define PI 3.1415926538\n\nconst int u_line_count = 40;\nconst float u_line_width = 7.0;\nconst float u_line_blur = 10.0;\n\nfloat Perlin2D(vec2 P) {\n    vec2 Pi = floor(P);\n    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);\n    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);\n    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;\n    Pt += vec2(26.0, 161.0).xyxy;\n    Pt *= Pt;\n    Pt = Pt.xzxz * Pt.yyww;\n    vec4 hash_x = fract(Pt * (1.0 / 951.135664));\n    vec4 hash_y = fract(Pt * (1.0 / 642.949883));\n    vec4 grad_x = hash_x - 0.49999;\n    vec4 grad_y = hash_y - 0.49999;\n    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y)\n        * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);\n    grad_results *= 1.4142135623730950;\n    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy\n               * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);\n    vec4 blend2 = vec4(blend, vec2(1.0 - blend));\n    return dot(grad_results, blend2.zxzx * blend2.wwyy);\n}\n\nfloat pixel(float count, vec2 resolution) {\n    return (1.0 / max(resolution.x, resolution.y)) * count;\n}\n\nfloat lineFn(vec2 st, float width, float perc, float offset, vec2 mouse, float time, float amplitude, float distance) {\n    float split_offset = (perc * 0.4);\n    float split_point = 0.1 + split_offset;\n\n    float amplitude_normal = smoothstep(split_point, 0.7, st.x);\n    float amplitude_strength = 0.5;\n    float finalAmplitude = amplitude_normal * amplitude_strength\n                           * amplitude * (1.0 + (mouse.y - 0.5) * 0.2);\n\n    float time_scaled = time / 10.0 + (mouse.x - 0.5) * 1.0;\n    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;\n\n    float xnoise = mix(\n        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),\n        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,\n        st.x * 0.3\n    );\n\n    float y = 0.5 + (perc - 0.5) * distance + xnoise / 2.0 * finalAmplitude;\n\n    float line_start = smoothstep(\n        y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur),\n        y,\n        st.y\n    );\n\n    float line_end = smoothstep(\n        y,\n        y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur),\n        st.y\n    );\n\n    return clamp(\n        (line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))),\n        0.0,\n        1.0\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float line_strength = 1.0;\n    for (int i = 0; i < u_line_count; i++) {\n        float p = float(i) / float(u_line_count);\n        line_strength *= (1.0 - lineFn(\n            uv,\n            u_line_width * pixel(1.0, iResolution.xy) * (1.0 - p),\n            p,\n            (PI * 1.0) * p,\n            uMouse,\n            iTime,\n            uAmplitude,\n            uDistance\n        ));\n    }\n\n    float colorVal = 1.0 - line_strength;\n    fragColor = vec4(uColor * colorVal, colorVal);\n}\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`;\nconst Threads = ({\n  color = [1, 1, 1],\n  amplitude = 1,\n  distance = 0,\n  enableMouseInteraction = false,\n  ...rest\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const animationFrameId = useRef();\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    const renderer = new Renderer({\n      alpha: true\n    });\n    const gl = renderer.gl;\n    gl.clearColor(0, 0, 0, 0);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    container.appendChild(gl.canvas);\n    const geometry = new Triangle(gl);\n    const program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        iTime: {\n          value: 0\n        },\n        iResolution: {\n          value: new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n        },\n        uColor: {\n          value: new Color(...color)\n        },\n        uAmplitude: {\n          value: amplitude\n        },\n        uDistance: {\n          value: distance\n        },\n        uMouse: {\n          value: new Float32Array([0.5, 0.5])\n        }\n      }\n    });\n    const mesh = new Mesh(gl, {\n      geometry,\n      program\n    });\n    function resize() {\n      const {\n        clientWidth,\n        clientHeight\n      } = container;\n      renderer.setSize(clientWidth, clientHeight);\n      program.uniforms.iResolution.value.r = clientWidth;\n      program.uniforms.iResolution.value.g = clientHeight;\n      program.uniforms.iResolution.value.b = clientWidth / clientHeight;\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n    let currentMouse = [0.5, 0.5];\n    let targetMouse = [0.5, 0.5];\n    function handleMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMouse = [x, y];\n    }\n    function handleMouseLeave() {\n      targetMouse = [0.5, 0.5];\n    }\n    if (enableMouseInteraction) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n      container.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n    function update(t) {\n      if (enableMouseInteraction) {\n        const smoothing = 0.05;\n        currentMouse[0] += smoothing * (targetMouse[0] - currentMouse[0]);\n        currentMouse[1] += smoothing * (targetMouse[1] - currentMouse[1]);\n        program.uniforms.uMouse.value[0] = currentMouse[0];\n        program.uniforms.uMouse.value[1] = currentMouse[1];\n      } else {\n        program.uniforms.uMouse.value[0] = 0.5;\n        program.uniforms.uMouse.value[1] = 0.5;\n      }\n      program.uniforms.iTime.value = t * 0.001;\n      renderer.render({\n        scene: mesh\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    }\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => {\n      var _gl$getExtension;\n      if (animationFrameId.current) cancelAnimationFrame(animationFrameId.current);\n      window.removeEventListener(\"resize\", resize);\n      if (enableMouseInteraction) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n        container.removeEventListener(\"mouseleave\", handleMouseLeave);\n      }\n      if (container.contains(gl.canvas)) container.removeChild(gl.canvas);\n      (_gl$getExtension = gl.getExtension(\"WEBGL_lose_context\")) === null || _gl$getExtension === void 0 ? void 0 : _gl$getExtension.loseContext();\n    };\n  }, [color, amplitude, distance, enableMouseInteraction]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"threads-container\",\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 10\n  }, this);\n};\n_s(Threads, \"ajEYVWde01g5rLH4HHi9cEXT1ag=\");\n_c = Threads;\nexport default Threads;\nvar _c;\n$RefreshReg$(_c, \"Threads\");","map":{"version":3,"names":["useEffect","useRef","Renderer","Program","Mesh","Triangle","Color","jsxDEV","_jsxDEV","vertexShader","fragmentShader","Threads","color","amplitude","distance","enableMouseInteraction","rest","_s","containerRef","animationFrameId","current","container","renderer","alpha","gl","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","appendChild","canvas","geometry","program","vertex","fragment","uniforms","iTime","value","iResolution","width","height","uColor","uAmplitude","uDistance","uMouse","Float32Array","mesh","resize","clientWidth","clientHeight","setSize","r","g","b","window","addEventListener","currentMouse","targetMouse","handleMouseMove","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","handleMouseLeave","update","t","smoothing","render","scene","requestAnimationFrame","_gl$getExtension","cancelAnimationFrame","removeEventListener","contains","removeChild","getExtension","loseContext","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/src/components/Backgrounds/Threads/Threads.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { Renderer, Program, Mesh, Triangle, Color } from \"ogl\";\n\nimport \"./Threads.css\";\n\nconst vertexShader = `\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nconst fragmentShader = `\nprecision highp float;\n\nuniform float iTime;\nuniform vec3 iResolution;\nuniform vec3 uColor;\nuniform float uAmplitude;\nuniform float uDistance;\nuniform vec2 uMouse;\n\n#define PI 3.1415926538\n\nconst int u_line_count = 40;\nconst float u_line_width = 7.0;\nconst float u_line_blur = 10.0;\n\nfloat Perlin2D(vec2 P) {\n    vec2 Pi = floor(P);\n    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);\n    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);\n    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;\n    Pt += vec2(26.0, 161.0).xyxy;\n    Pt *= Pt;\n    Pt = Pt.xzxz * Pt.yyww;\n    vec4 hash_x = fract(Pt * (1.0 / 951.135664));\n    vec4 hash_y = fract(Pt * (1.0 / 642.949883));\n    vec4 grad_x = hash_x - 0.49999;\n    vec4 grad_y = hash_y - 0.49999;\n    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y)\n        * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);\n    grad_results *= 1.4142135623730950;\n    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy\n               * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);\n    vec4 blend2 = vec4(blend, vec2(1.0 - blend));\n    return dot(grad_results, blend2.zxzx * blend2.wwyy);\n}\n\nfloat pixel(float count, vec2 resolution) {\n    return (1.0 / max(resolution.x, resolution.y)) * count;\n}\n\nfloat lineFn(vec2 st, float width, float perc, float offset, vec2 mouse, float time, float amplitude, float distance) {\n    float split_offset = (perc * 0.4);\n    float split_point = 0.1 + split_offset;\n\n    float amplitude_normal = smoothstep(split_point, 0.7, st.x);\n    float amplitude_strength = 0.5;\n    float finalAmplitude = amplitude_normal * amplitude_strength\n                           * amplitude * (1.0 + (mouse.y - 0.5) * 0.2);\n\n    float time_scaled = time / 10.0 + (mouse.x - 0.5) * 1.0;\n    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;\n\n    float xnoise = mix(\n        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),\n        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,\n        st.x * 0.3\n    );\n\n    float y = 0.5 + (perc - 0.5) * distance + xnoise / 2.0 * finalAmplitude;\n\n    float line_start = smoothstep(\n        y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur),\n        y,\n        st.y\n    );\n\n    float line_end = smoothstep(\n        y,\n        y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur),\n        st.y\n    );\n\n    return clamp(\n        (line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))),\n        0.0,\n        1.0\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float line_strength = 1.0;\n    for (int i = 0; i < u_line_count; i++) {\n        float p = float(i) / float(u_line_count);\n        line_strength *= (1.0 - lineFn(\n            uv,\n            u_line_width * pixel(1.0, iResolution.xy) * (1.0 - p),\n            p,\n            (PI * 1.0) * p,\n            uMouse,\n            iTime,\n            uAmplitude,\n            uDistance\n        ));\n    }\n\n    float colorVal = 1.0 - line_strength;\n    fragColor = vec4(uColor * colorVal, colorVal);\n}\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`;\n\nconst Threads = ({\n  color = [1, 1, 1],\n  amplitude = 1,\n  distance = 0,\n  enableMouseInteraction = false,\n  ...rest\n}) => {\n  const containerRef = useRef(null);\n  const animationFrameId = useRef();\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    const renderer = new Renderer({ alpha: true });\n    const gl = renderer.gl;\n    gl.clearColor(0, 0, 0, 0);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    container.appendChild(gl.canvas);\n\n    const geometry = new Triangle(gl);\n    const program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        iTime: { value: 0 },\n        iResolution: {\n          value: new Color(\n            gl.canvas.width,\n            gl.canvas.height,\n            gl.canvas.width / gl.canvas.height\n          ),\n        },\n        uColor: { value: new Color(...color) },\n        uAmplitude: { value: amplitude },\n        uDistance: { value: distance },\n        uMouse: { value: new Float32Array([0.5, 0.5]) },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n\n    function resize() {\n      const { clientWidth, clientHeight } = container;\n      renderer.setSize(clientWidth, clientHeight);\n      program.uniforms.iResolution.value.r = clientWidth;\n      program.uniforms.iResolution.value.g = clientHeight;\n      program.uniforms.iResolution.value.b = clientWidth / clientHeight;\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n\n    let currentMouse = [0.5, 0.5];\n    let targetMouse = [0.5, 0.5];\n\n    function handleMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMouse = [x, y];\n    }\n    function handleMouseLeave() {\n      targetMouse = [0.5, 0.5];\n    }\n    if (enableMouseInteraction) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n      container.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n\n    function update(t) {\n      if (enableMouseInteraction) {\n        const smoothing = 0.05;\n        currentMouse[0] += smoothing * (targetMouse[0] - currentMouse[0]);\n        currentMouse[1] += smoothing * (targetMouse[1] - currentMouse[1]);\n        program.uniforms.uMouse.value[0] = currentMouse[0];\n        program.uniforms.uMouse.value[1] = currentMouse[1];\n      } else {\n        program.uniforms.uMouse.value[0] = 0.5;\n        program.uniforms.uMouse.value[1] = 0.5;\n      }\n      program.uniforms.iTime.value = t * 0.001;\n\n      renderer.render({ scene: mesh });\n      animationFrameId.current = requestAnimationFrame(update);\n    }\n    animationFrameId.current = requestAnimationFrame(update);\n\n    return () => {\n      if (animationFrameId.current)\n        cancelAnimationFrame(animationFrameId.current);\n      window.removeEventListener(\"resize\", resize);\n\n      if (enableMouseInteraction) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n        container.removeEventListener(\"mouseleave\", handleMouseLeave);\n      }\n      if (container.contains(gl.canvas)) container.removeChild(gl.canvas);\n      gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n    };\n  }, [color, amplitude, distance, enableMouseInteraction]);\n\n  return <div ref={containerRef} className=\"threads-container\" {...rest} />;\n};\n\nexport default Threads;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}