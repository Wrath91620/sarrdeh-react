{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sarrdeh Tech\\\\Desktop\\\\Sarrdeh-React\\\\sarrdeh-react\\\\src\\\\components\\\\Backgrounds\\\\RippleGrid\\\\RippleGrid.jsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport { Renderer, Program, Triangle, Mesh } from \"ogl\";\nimport \"./RippleGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RippleGrid = ({\n  enableRainbow = false,\n  gridColor = \"#ffffff\",\n  rippleIntensity = 0.05,\n  gridSize = 10.0,\n  gridThickness = 15.0,\n  fadeDistance = 1.5,\n  vignetteStrength = 2.0,\n  glowIntensity = 0.1,\n  opacity = 1.0,\n  gridRotation = 0,\n  mouseInteraction = true,\n  mouseInteractionRadius = 1\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const mousePositionRef = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const targetMouseRef = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const mouseInfluenceRef = useRef(0);\n  const uniformsRef = useRef(null);\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const hexToRgb = hex => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255] : [1, 1, 1];\n    };\n    const renderer = new Renderer({\n      dpr: Math.min(window.devicePixelRatio, 2),\n      alpha: true\n    });\n    const gl = renderer.gl;\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    gl.canvas.style.width = \"100%\";\n    gl.canvas.style.height = \"100%\";\n    containerRef.current.appendChild(gl.canvas);\n    const vert = `\nattribute vec2 position;\nvarying vec2 vUv;\nvoid main() {\n    vUv = position * 0.5 + 0.5;\n    gl_Position = vec4(position, 0.0, 1.0);\n}`;\n    const frag = `precision highp float;\nuniform float iTime;\nuniform vec2 iResolution;\nuniform bool enableRainbow;\nuniform vec3 gridColor;\nuniform float rippleIntensity;\nuniform float gridSize;\nuniform float gridThickness;\nuniform float fadeDistance;\nuniform float vignetteStrength;\nuniform float glowIntensity;\nuniform float opacity;\nuniform float gridRotation;\nuniform bool mouseInteraction;\nuniform vec2 mousePosition;\nuniform float mouseInfluence;\nuniform float mouseInteractionRadius;\nvarying vec2 vUv;\n\nfloat pi = 3.141592;\n\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid main() {\n    vec2 uv = vUv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    if (gridRotation != 0.0) {\n        uv = rotate(gridRotation * pi / 180.0) * uv;\n    }\n\n    float dist = length(uv);\n    float func = sin(pi * (iTime - dist));\n    vec2 rippleUv = uv + uv * func * rippleIntensity;\n\n    if (mouseInteraction && mouseInfluence > 0.0) {\n        vec2 mouseUv = (mousePosition * 2.0 - 1.0);\n        mouseUv.x *= iResolution.x / iResolution.y;\n        float mouseDist = length(uv - mouseUv);\n        \n        float influence = mouseInfluence * exp(-mouseDist * mouseDist / (mouseInteractionRadius * mouseInteractionRadius));\n        \n        float mouseWave = sin(pi * (iTime * 2.0 - mouseDist * 3.0)) * influence;\n        rippleUv += normalize(uv - mouseUv) * mouseWave * rippleIntensity * 0.3;\n    }\n\n    vec2 a = sin(gridSize * 0.5 * pi * rippleUv - pi / 2.0);\n    vec2 b = abs(a);\n\n    float aaWidth = 0.5;\n    vec2 smoothB = vec2(\n        smoothstep(0.0, aaWidth, b.x),\n        smoothstep(0.0, aaWidth, b.y)\n    );\n\n    vec3 color = vec3(0.0);\n    color += exp(-gridThickness * smoothB.x * (0.8 + 0.5 * sin(pi * iTime)));\n    color += exp(-gridThickness * smoothB.y);\n    color += 0.5 * exp(-(gridThickness / 4.0) * sin(smoothB.x));\n    color += 0.5 * exp(-(gridThickness / 3.0) * smoothB.y);\n\n    if (glowIntensity > 0.0) {\n        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.x);\n        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.y);\n    }\n\n    float ddd = exp(-2.0 * clamp(pow(dist, fadeDistance), 0.0, 1.0));\n    \n    vec2 vignetteCoords = vUv - 0.5;\n    float vignetteDistance = length(vignetteCoords);\n    float vignette = 1.0 - pow(vignetteDistance * 2.0, vignetteStrength);\n    vignette = clamp(vignette, 0.0, 1.0);\n    \n    vec3 t;\n    if (enableRainbow) {\n        t = vec3(\n            uv.x * 0.5 + 0.5 * sin(iTime),\n            uv.y * 0.5 + 0.5 * cos(iTime),\n            pow(cos(iTime), 4.0)\n        ) + 0.5;\n    } else {\n        t = gridColor;\n    }\n\n    float finalFade = ddd * vignette;\n    float alpha = length(color) * finalFade * opacity;\n    gl_FragColor = vec4(color * t * finalFade * opacity, alpha);\n}`;\n    const uniforms = {\n      iTime: {\n        value: 0\n      },\n      iResolution: {\n        value: [1, 1]\n      },\n      enableRainbow: {\n        value: enableRainbow\n      },\n      gridColor: {\n        value: hexToRgb(gridColor)\n      },\n      rippleIntensity: {\n        value: rippleIntensity\n      },\n      gridSize: {\n        value: gridSize\n      },\n      gridThickness: {\n        value: gridThickness\n      },\n      fadeDistance: {\n        value: fadeDistance\n      },\n      vignetteStrength: {\n        value: vignetteStrength\n      },\n      glowIntensity: {\n        value: glowIntensity\n      },\n      opacity: {\n        value: opacity\n      },\n      gridRotation: {\n        value: gridRotation\n      },\n      mouseInteraction: {\n        value: mouseInteraction\n      },\n      mousePosition: {\n        value: [0.5, 0.5]\n      },\n      mouseInfluence: {\n        value: 0\n      },\n      mouseInteractionRadius: {\n        value: mouseInteractionRadius\n      }\n    };\n    uniformsRef.current = uniforms;\n    const geometry = new Triangle(gl);\n    const program = new Program(gl, {\n      vertex: vert,\n      fragment: frag,\n      uniforms\n    });\n    const mesh = new Mesh(gl, {\n      geometry,\n      program\n    });\n    const resize = () => {\n      const {\n        clientWidth: w,\n        clientHeight: h\n      } = containerRef.current;\n      renderer.setSize(w, h);\n      uniforms.iResolution.value = [w, h];\n    };\n    const handleMouseMove = e => {\n      if (!mouseInteraction || !containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height; // Flip Y coordinate\n      targetMouseRef.current = {\n        x,\n        y\n      };\n    };\n    const handleMouseEnter = () => {\n      if (!mouseInteraction) return;\n      mouseInfluenceRef.current = 1.0;\n    };\n    const handleMouseLeave = () => {\n      if (!mouseInteraction) return;\n      mouseInfluenceRef.current = 0.0;\n    };\n    window.addEventListener(\"resize\", resize);\n    if (mouseInteraction) {\n      containerRef.current.addEventListener(\"mousemove\", handleMouseMove);\n      containerRef.current.addEventListener(\"mouseenter\", handleMouseEnter);\n      containerRef.current.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n    resize();\n    const render = t => {\n      uniforms.iTime.value = t * 0.001;\n      const lerpFactor = 0.1;\n      mousePositionRef.current.x += (targetMouseRef.current.x - mousePositionRef.current.x) * lerpFactor;\n      mousePositionRef.current.y += (targetMouseRef.current.y - mousePositionRef.current.y) * lerpFactor;\n      const currentInfluence = uniforms.mouseInfluence.value;\n      const targetInfluence = mouseInfluenceRef.current;\n      uniforms.mouseInfluence.value += (targetInfluence - currentInfluence) * 0.05;\n      uniforms.mousePosition.value = [mousePositionRef.current.x, mousePositionRef.current.y];\n      renderer.render({\n        scene: mesh\n      });\n      requestAnimationFrame(render);\n    };\n    requestAnimationFrame(render);\n    return () => {\n      var _renderer$gl$getExten, _containerRef$current;\n      window.removeEventListener(\"resize\", resize);\n      if (mouseInteraction && containerRef.current) {\n        containerRef.current.removeEventListener(\"mousemove\", handleMouseMove);\n        containerRef.current.removeEventListener(\"mouseenter\", handleMouseEnter);\n        containerRef.current.removeEventListener(\"mouseleave\", handleMouseLeave);\n      }\n      (_renderer$gl$getExten = renderer.gl.getExtension(\"WEBGL_lose_context\")) === null || _renderer$gl$getExten === void 0 ? void 0 : _renderer$gl$getExten.loseContext();\n      (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.removeChild(gl.canvas);\n    };\n  }, []);\n  useEffect(() => {\n    if (!uniformsRef.current) return;\n    const hexToRgb = hex => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255] : [1, 1, 1];\n    };\n    uniformsRef.current.enableRainbow.value = enableRainbow;\n    uniformsRef.current.gridColor.value = hexToRgb(gridColor);\n    uniformsRef.current.rippleIntensity.value = rippleIntensity;\n    uniformsRef.current.gridSize.value = gridSize;\n    uniformsRef.current.gridThickness.value = gridThickness;\n    uniformsRef.current.fadeDistance.value = fadeDistance;\n    uniformsRef.current.vignetteStrength.value = vignetteStrength;\n    uniformsRef.current.glowIntensity.value = glowIntensity;\n    uniformsRef.current.opacity.value = opacity;\n    uniformsRef.current.gridRotation.value = gridRotation;\n    uniformsRef.current.mouseInteraction.value = mouseInteraction;\n    uniformsRef.current.mouseInteractionRadius.value = mouseInteractionRadius;\n  }, [enableRainbow, gridColor, rippleIntensity, gridSize, gridThickness, fadeDistance, vignetteStrength, glowIntensity, opacity, gridRotation, mouseInteraction, mouseInteractionRadius]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"ripple-grid-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 10\n  }, this);\n};\n_s(RippleGrid, \"bQAd2D0lJ22TVT3uudQRC6zwcZ4=\");\n_c = RippleGrid;\nexport default RippleGrid;\nvar _c;\n$RefreshReg$(_c, \"RippleGrid\");","map":{"version":3,"names":["useRef","useEffect","Renderer","Program","Triangle","Mesh","jsxDEV","_jsxDEV","RippleGrid","enableRainbow","gridColor","rippleIntensity","gridSize","gridThickness","fadeDistance","vignetteStrength","glowIntensity","opacity","gridRotation","mouseInteraction","mouseInteractionRadius","_s","containerRef","mousePositionRef","x","y","targetMouseRef","mouseInfluenceRef","uniformsRef","current","hexToRgb","hex","result","exec","parseInt","renderer","dpr","Math","min","window","devicePixelRatio","alpha","gl","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","canvas","style","width","height","appendChild","vert","frag","uniforms","iTime","value","iResolution","mousePosition","mouseInfluence","geometry","program","vertex","fragment","mesh","resize","clientWidth","w","clientHeight","h","setSize","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseEnter","handleMouseLeave","addEventListener","render","t","lerpFactor","currentInfluence","targetInfluence","scene","requestAnimationFrame","_renderer$gl$getExten","_containerRef$current","removeEventListener","getExtension","loseContext","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sarrdeh Tech/Desktop/Sarrdeh-React/sarrdeh-react/src/components/Backgrounds/RippleGrid/RippleGrid.jsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { Renderer, Program, Triangle, Mesh } from \"ogl\";\nimport \"./RippleGrid.css\";\n\nconst RippleGrid = ({\n  enableRainbow = false,\n  gridColor = \"#ffffff\",\n  rippleIntensity = 0.05,\n  gridSize = 10.0,\n  gridThickness = 15.0,\n  fadeDistance = 1.5,\n  vignetteStrength = 2.0,\n  glowIntensity = 0.1,\n  opacity = 1.0,\n  gridRotation = 0,\n  mouseInteraction = true,\n  mouseInteractionRadius = 1,\n}) => {\n  const containerRef = useRef(null);\n  const mousePositionRef = useRef({ x: 0.5, y: 0.5 });\n  const targetMouseRef = useRef({ x: 0.5, y: 0.5 });\n  const mouseInfluenceRef = useRef(0);\n  const uniformsRef = useRef(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const hexToRgb = (hex) => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result\n        ? [\n          parseInt(result[1], 16) / 255,\n          parseInt(result[2], 16) / 255,\n          parseInt(result[3], 16) / 255,\n        ]\n        : [1, 1, 1];\n    };\n\n    const renderer = new Renderer({\n      dpr: Math.min(window.devicePixelRatio, 2),\n      alpha: true,\n    });\n    const gl = renderer.gl;\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    gl.canvas.style.width = \"100%\";\n    gl.canvas.style.height = \"100%\";\n    containerRef.current.appendChild(gl.canvas);\n\n    const vert = `\nattribute vec2 position;\nvarying vec2 vUv;\nvoid main() {\n    vUv = position * 0.5 + 0.5;\n    gl_Position = vec4(position, 0.0, 1.0);\n}`;\n\n    const frag = `precision highp float;\nuniform float iTime;\nuniform vec2 iResolution;\nuniform bool enableRainbow;\nuniform vec3 gridColor;\nuniform float rippleIntensity;\nuniform float gridSize;\nuniform float gridThickness;\nuniform float fadeDistance;\nuniform float vignetteStrength;\nuniform float glowIntensity;\nuniform float opacity;\nuniform float gridRotation;\nuniform bool mouseInteraction;\nuniform vec2 mousePosition;\nuniform float mouseInfluence;\nuniform float mouseInteractionRadius;\nvarying vec2 vUv;\n\nfloat pi = 3.141592;\n\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid main() {\n    vec2 uv = vUv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    if (gridRotation != 0.0) {\n        uv = rotate(gridRotation * pi / 180.0) * uv;\n    }\n\n    float dist = length(uv);\n    float func = sin(pi * (iTime - dist));\n    vec2 rippleUv = uv + uv * func * rippleIntensity;\n\n    if (mouseInteraction && mouseInfluence > 0.0) {\n        vec2 mouseUv = (mousePosition * 2.0 - 1.0);\n        mouseUv.x *= iResolution.x / iResolution.y;\n        float mouseDist = length(uv - mouseUv);\n        \n        float influence = mouseInfluence * exp(-mouseDist * mouseDist / (mouseInteractionRadius * mouseInteractionRadius));\n        \n        float mouseWave = sin(pi * (iTime * 2.0 - mouseDist * 3.0)) * influence;\n        rippleUv += normalize(uv - mouseUv) * mouseWave * rippleIntensity * 0.3;\n    }\n\n    vec2 a = sin(gridSize * 0.5 * pi * rippleUv - pi / 2.0);\n    vec2 b = abs(a);\n\n    float aaWidth = 0.5;\n    vec2 smoothB = vec2(\n        smoothstep(0.0, aaWidth, b.x),\n        smoothstep(0.0, aaWidth, b.y)\n    );\n\n    vec3 color = vec3(0.0);\n    color += exp(-gridThickness * smoothB.x * (0.8 + 0.5 * sin(pi * iTime)));\n    color += exp(-gridThickness * smoothB.y);\n    color += 0.5 * exp(-(gridThickness / 4.0) * sin(smoothB.x));\n    color += 0.5 * exp(-(gridThickness / 3.0) * smoothB.y);\n\n    if (glowIntensity > 0.0) {\n        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.x);\n        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.y);\n    }\n\n    float ddd = exp(-2.0 * clamp(pow(dist, fadeDistance), 0.0, 1.0));\n    \n    vec2 vignetteCoords = vUv - 0.5;\n    float vignetteDistance = length(vignetteCoords);\n    float vignette = 1.0 - pow(vignetteDistance * 2.0, vignetteStrength);\n    vignette = clamp(vignette, 0.0, 1.0);\n    \n    vec3 t;\n    if (enableRainbow) {\n        t = vec3(\n            uv.x * 0.5 + 0.5 * sin(iTime),\n            uv.y * 0.5 + 0.5 * cos(iTime),\n            pow(cos(iTime), 4.0)\n        ) + 0.5;\n    } else {\n        t = gridColor;\n    }\n\n    float finalFade = ddd * vignette;\n    float alpha = length(color) * finalFade * opacity;\n    gl_FragColor = vec4(color * t * finalFade * opacity, alpha);\n}`;\n\n    const uniforms = {\n      iTime: { value: 0 },\n      iResolution: { value: [1, 1] },\n      enableRainbow: { value: enableRainbow },\n      gridColor: { value: hexToRgb(gridColor) },\n      rippleIntensity: { value: rippleIntensity },\n      gridSize: { value: gridSize },\n      gridThickness: { value: gridThickness },\n      fadeDistance: { value: fadeDistance },\n      vignetteStrength: { value: vignetteStrength },\n      glowIntensity: { value: glowIntensity },\n      opacity: { value: opacity },\n      gridRotation: { value: gridRotation },\n      mouseInteraction: { value: mouseInteraction },\n      mousePosition: { value: [0.5, 0.5] },\n      mouseInfluence: { value: 0 },\n      mouseInteractionRadius: { value: mouseInteractionRadius },\n    };\n\n    uniformsRef.current = uniforms;\n\n    const geometry = new Triangle(gl);\n    const program = new Program(gl, { vertex: vert, fragment: frag, uniforms });\n    const mesh = new Mesh(gl, { geometry, program });\n\n    const resize = () => {\n      const { clientWidth: w, clientHeight: h } = containerRef.current;\n      renderer.setSize(w, h);\n      uniforms.iResolution.value = [w, h];\n    };\n\n    const handleMouseMove = (e) => {\n      if (!mouseInteraction || !containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height; // Flip Y coordinate\n      targetMouseRef.current = { x, y };\n    };\n\n    const handleMouseEnter = () => {\n      if (!mouseInteraction) return;\n      mouseInfluenceRef.current = 1.0;\n    };\n\n    const handleMouseLeave = () => {\n      if (!mouseInteraction) return;\n      mouseInfluenceRef.current = 0.0;\n    };\n\n    window.addEventListener(\"resize\", resize);\n    if (mouseInteraction) {\n      containerRef.current.addEventListener(\"mousemove\", handleMouseMove);\n      containerRef.current.addEventListener(\"mouseenter\", handleMouseEnter);\n      containerRef.current.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n    resize();\n\n    const render = (t) => {\n      uniforms.iTime.value = t * 0.001;\n\n      const lerpFactor = 0.1;\n      mousePositionRef.current.x +=\n        (targetMouseRef.current.x - mousePositionRef.current.x) * lerpFactor;\n      mousePositionRef.current.y +=\n        (targetMouseRef.current.y - mousePositionRef.current.y) * lerpFactor;\n\n      const currentInfluence = uniforms.mouseInfluence.value;\n      const targetInfluence = mouseInfluenceRef.current;\n      uniforms.mouseInfluence.value +=\n        (targetInfluence - currentInfluence) * 0.05;\n\n      uniforms.mousePosition.value = [\n        mousePositionRef.current.x,\n        mousePositionRef.current.y,\n      ];\n\n      renderer.render({ scene: mesh });\n      requestAnimationFrame(render);\n    };\n\n    requestAnimationFrame(render);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n      if (mouseInteraction && containerRef.current) {\n        containerRef.current.removeEventListener(\"mousemove\", handleMouseMove);\n        containerRef.current.removeEventListener(\n          \"mouseenter\",\n          handleMouseEnter\n        );\n        containerRef.current.removeEventListener(\n          \"mouseleave\",\n          handleMouseLeave\n        );\n      }\n      renderer.gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n      containerRef.current?.removeChild(gl.canvas);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!uniformsRef.current) return;\n\n    const hexToRgb = (hex) => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result\n        ? [\n          parseInt(result[1], 16) / 255,\n          parseInt(result[2], 16) / 255,\n          parseInt(result[3], 16) / 255,\n        ]\n        : [1, 1, 1];\n    };\n\n    uniformsRef.current.enableRainbow.value = enableRainbow;\n    uniformsRef.current.gridColor.value = hexToRgb(gridColor);\n    uniformsRef.current.rippleIntensity.value = rippleIntensity;\n    uniformsRef.current.gridSize.value = gridSize;\n    uniformsRef.current.gridThickness.value = gridThickness;\n    uniformsRef.current.fadeDistance.value = fadeDistance;\n    uniformsRef.current.vignetteStrength.value = vignetteStrength;\n    uniformsRef.current.glowIntensity.value = glowIntensity;\n    uniformsRef.current.opacity.value = opacity;\n    uniformsRef.current.gridRotation.value = gridRotation;\n    uniformsRef.current.mouseInteraction.value = mouseInteraction;\n    uniformsRef.current.mouseInteractionRadius.value = mouseInteractionRadius;\n  }, [\n    enableRainbow,\n    gridColor,\n    rippleIntensity,\n    gridSize,\n    gridThickness,\n    fadeDistance,\n    vignetteStrength,\n    glowIntensity,\n    opacity,\n    gridRotation,\n    mouseInteraction,\n    mouseInteractionRadius,\n  ]);\n\n  return <div ref={containerRef} className=\"ripple-grid-container\" />;\n};\n\nexport default RippleGrid;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,KAAK;AACvD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAClBC,aAAa,GAAG,KAAK;EACrBC,SAAS,GAAG,SAAS;EACrBC,eAAe,GAAG,IAAI;EACtBC,QAAQ,GAAG,IAAI;EACfC,aAAa,GAAG,IAAI;EACpBC,YAAY,GAAG,GAAG;EAClBC,gBAAgB,GAAG,GAAG;EACtBC,aAAa,GAAG,GAAG;EACnBC,OAAO,GAAG,GAAG;EACbC,YAAY,GAAG,CAAC;EAChBC,gBAAgB,GAAG,IAAI;EACvBC,sBAAsB,GAAG;AAC3B,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,YAAY,GAAGtB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMuB,gBAAgB,GAAGvB,MAAM,CAAC;IAAEwB,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC,CAAC;EACnD,MAAMC,cAAc,GAAG1B,MAAM,CAAC;IAAEwB,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC,CAAC;EACjD,MAAME,iBAAiB,GAAG3B,MAAM,CAAC,CAAC,CAAC;EACnC,MAAM4B,WAAW,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAEhCC,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,YAAY,CAACO,OAAO,EAAE;IAE3B,MAAMC,QAAQ,GAAIC,GAAG,IAAK;MACxB,MAAMC,MAAM,GAAG,2CAA2C,CAACC,IAAI,CAACF,GAAG,CAAC;MACpE,OAAOC,MAAM,GACT,CACAE,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,EAC7BE,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,EAC7BE,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAC9B,GACC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC;IAED,MAAMG,QAAQ,GAAG,IAAIjC,QAAQ,CAAC;MAC5BkC,GAAG,EAAEC,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,gBAAgB,EAAE,CAAC,CAAC;MACzCC,KAAK,EAAE;IACT,CAAC,CAAC;IACF,MAAMC,EAAE,GAAGP,QAAQ,CAACO,EAAE;IACtBA,EAAE,CAACC,MAAM,CAACD,EAAE,CAACE,KAAK,CAAC;IACnBF,EAAE,CAACG,SAAS,CAACH,EAAE,CAACI,SAAS,EAAEJ,EAAE,CAACK,mBAAmB,CAAC;IAClDL,EAAE,CAACM,MAAM,CAACC,KAAK,CAACC,KAAK,GAAG,MAAM;IAC9BR,EAAE,CAACM,MAAM,CAACC,KAAK,CAACE,MAAM,GAAG,MAAM;IAC/B7B,YAAY,CAACO,OAAO,CAACuB,WAAW,CAACV,EAAE,CAACM,MAAM,CAAC;IAE3C,MAAMK,IAAI,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE;IAEE,MAAMC,IAAI,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IAEE,MAAMC,QAAQ,GAAG;MACfC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAE,CAAC;MACnBC,WAAW,EAAE;QAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;MAAE,CAAC;MAC9BhD,aAAa,EAAE;QAAEgD,KAAK,EAAEhD;MAAc,CAAC;MACvCC,SAAS,EAAE;QAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}